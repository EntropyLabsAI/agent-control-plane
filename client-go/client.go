//go:build go1.22

// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Decision.
const (
	Approve   Decision = "approve"
	Escalate  Decision = "escalate"
	Modify    Decision = "modify"
	Reject    Decision = "reject"
	Terminate Decision = "terminate"
)

// Defines values for MessageRole.
const (
	Assistant MessageRole = "assistant"
	System    MessageRole = "system"
	User      MessageRole = "user"
)

// Defines values for MessageType.
const (
	Audio MessageType = "audio"
	Text  MessageType = "text"
)

// Defines values for Status.
const (
	Assigned  Status = "assigned"
	Completed Status = "completed"
	Failed    Status = "failed"
	Pending   Status = "pending"
	Timeout   Status = "timeout"
)

// Defines values for SupervisorType.
const (
	ClientSupervisor SupervisorType = "client_supervisor"
	HumanSupervisor  SupervisorType = "human_supervisor"
	NoSupervisor     SupervisorType = "no_supervisor"
)

// Arguments defines model for Arguments.
type Arguments map[string]interface{}

// ChainExecution defines model for ChainExecution.
type ChainExecution struct {
	ChainId        openapi_types.UUID `json:"chain_id"`
	CreatedAt      time.Time          `json:"created_at"`
	Id             openapi_types.UUID `json:"id"`
	RequestGroupId openapi_types.UUID `json:"request_group_id"`
}

// ChainExecutionState defines model for ChainExecutionState.
type ChainExecutionState struct {
	Chain               SupervisorChain           `json:"chain"`
	ChainExecution      ChainExecution            `json:"chain_execution"`
	SupervisionRequests []SupervisionRequestState `json:"supervision_requests"`
}

// ChainRequest defines model for ChainRequest.
type ChainRequest struct {
	// SupervisorIds Array of supervisor IDs to create chains with
	SupervisorIds *[]openapi_types.UUID `json:"supervisor_ids,omitempty"`
}

// Choice defines model for Choice.
type Choice struct {
	Message    Message `json:"message"`
	StopReason *string `json:"stop_reason,omitempty"`
}

// Decision defines model for Decision.
type Decision string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Details *string `json:"details,omitempty"`
	Error   string  `json:"error"`
}

// HubStats defines model for HubStats.
type HubStats struct {
	AssignedReviews       map[string]int `json:"assigned_reviews"`
	AssignedReviewsCount  int            `json:"assigned_reviews_count"`
	BusyClients           int            `json:"busy_clients"`
	CompletedReviewsCount int            `json:"completed_reviews_count"`
	ConnectedClients      int            `json:"connected_clients"`
	FreeClients           int            `json:"free_clients"`
	PendingReviewsCount   int            `json:"pending_reviews_count"`
	ReviewDistribution    map[string]int `json:"review_distribution"`
}

// Message defines model for Message.
type Message struct {
	Content   string              `json:"content"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Role      MessageRole         `json:"role"`
	Source    *string             `json:"source,omitempty"`
	ToolCalls *[]ToolCall         `json:"tool_calls,omitempty"`
	Type      *MessageType        `json:"type,omitempty"`
}

// MessageRole defines model for MessageRole.
type MessageRole string

// MessageType defines model for MessageType.
type MessageType string

// Output defines model for Output.
type Output struct {
	Choices *[]Choice `json:"choices,omitempty"`
	Model   *string   `json:"model,omitempty"`
	Usage   *Usage    `json:"usage,omitempty"`
}

// Project defines model for Project.
type Project struct {
	CreatedAt     time.Time          `json:"created_at"`
	Id            openapi_types.UUID `json:"id"`
	Name          string             `json:"name"`
	RunResultTags []string           `json:"run_result_tags"`
}

// ReviewPayload Contains all the information needed for a human reviewer to make a supervision decision
type ReviewPayload struct {
	ChainState   ChainExecutionState `json:"chain_state"`
	RequestGroup ToolRequestGroup    `json:"request_group"`

	// RunId The ID of the run this review is for
	RunId              openapi_types.UUID `json:"run_id"`
	SupervisionRequest SupervisionRequest `json:"supervision_request"`
}

// Run defines model for Run.
type Run struct {
	CreatedAt time.Time          `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Result    *string            `json:"result,omitempty"`
	Status    *Status            `json:"status,omitempty"`
	TaskId    openapi_types.UUID `json:"task_id"`
}

// RunExecution defines model for RunExecution.
type RunExecution struct {
	Chains       []ChainExecutionState `json:"chains"`
	RequestGroup ToolRequestGroup      `json:"request_group"`
	Status       Status                `json:"status"`
}

// RunState defines model for RunState.
type RunState = []RunExecution

// Status defines model for Status.
type Status string

// SupervisionRequest defines model for SupervisionRequest.
type SupervisionRequest struct {
	ChainexecutionId *openapi_types.UUID `json:"chainexecution_id,omitempty"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	PositionInChain  int                 `json:"position_in_chain"`
	Status           *SupervisionStatus  `json:"status,omitempty"`
	SupervisorId     openapi_types.UUID  `json:"supervisor_id"`
}

// SupervisionRequestState defines model for SupervisionRequestState.
type SupervisionRequestState struct {
	Result             *SupervisionResult `json:"result,omitempty"`
	Status             SupervisionStatus  `json:"status"`
	SupervisionRequest SupervisionRequest `json:"supervision_request"`
}

// SupervisionResult defines model for SupervisionResult.
type SupervisionResult struct {
	ChosenToolrequestId  *openapi_types.UUID `json:"chosen_toolrequest_id,omitempty"`
	CreatedAt            time.Time           `json:"created_at"`
	Decision             Decision            `json:"decision"`
	Id                   *openapi_types.UUID `json:"id,omitempty"`
	Reasoning            string              `json:"reasoning"`
	SupervisionRequestId openapi_types.UUID  `json:"supervision_request_id"`
}

// SupervisionStatus defines model for SupervisionStatus.
type SupervisionStatus struct {
	CreatedAt            time.Time           `json:"created_at"`
	Id                   int                 `json:"id"`
	Status               Status              `json:"status"`
	SupervisionRequestId *openapi_types.UUID `json:"supervision_request_id,omitempty"`
}

// Supervisor defines model for Supervisor.
type Supervisor struct {
	Attributes  map[string]interface{} `json:"attributes"`
	Code        string                 `json:"code"`
	CreatedAt   time.Time              `json:"created_at"`
	Description string                 `json:"description"`
	Id          *openapi_types.UUID    `json:"id,omitempty"`
	Name        string                 `json:"name"`

	// Type The type of supervisor. ClientSupervisor means that the supervision is done client side and the server is merely informed. Other supervisor types are handled serverside, e.g. HumanSupervisor means that a human will review the request via the Sentinel UI.
	Type SupervisorType `json:"type"`
}

// SupervisorChain defines model for SupervisorChain.
type SupervisorChain struct {
	ChainId     openapi_types.UUID `json:"chain_id"`
	Supervisors []Supervisor       `json:"supervisors"`
}

// SupervisorType The type of supervisor. ClientSupervisor means that the supervision is done client side and the server is merely informed. Other supervisor types are handled serverside, e.g. HumanSupervisor means that a human will review the request via the Sentinel UI.
type SupervisorType string

// Task defines model for Task.
type Task struct {
	CreatedAt   time.Time          `json:"created_at"`
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
	ProjectId   openapi_types.UUID `json:"project_id"`
}

// TaskState defines model for TaskState.
type TaskState struct {
	Completed  bool                    `json:"completed"`
	Messages   []Message               `json:"messages"`
	Metadata   *map[string]interface{} `json:"metadata,omitempty"`
	Output     Output                  `json:"output"`
	Store      *map[string]interface{} `json:"store,omitempty"`
	ToolChoice *ToolChoice             `json:"tool_choice,omitempty"`
	Tools      []Tool                  `json:"tools"`
}

// Tool defines model for Tool.
type Tool struct {
	Attributes        map[string]interface{} `json:"attributes"`
	Code              string                 `json:"code"`
	Description       string                 `json:"description"`
	Id                *openapi_types.UUID    `json:"id,omitempty"`
	IgnoredAttributes *[]string              `json:"ignored_attributes,omitempty"`
	Name              string                 `json:"name"`
	RunId             openapi_types.UUID     `json:"run_id"`
}

// ToolCall defines model for ToolCall.
type ToolCall struct {
	Arguments  map[string]interface{} `json:"arguments"`
	Function   string                 `json:"function"`
	Id         string                 `json:"id"`
	ParseError *string                `json:"parse_error,omitempty"`
	Type       string                 `json:"type"`
}

// ToolChoice defines model for ToolChoice.
type ToolChoice struct {
	Arguments Arguments `json:"arguments"`
	Function  string    `json:"function"`
	Id        string    `json:"id"`
	Type      string    `json:"type"`
}

// ToolRequest defines model for ToolRequest.
type ToolRequest struct {
	Arguments      Arguments           `json:"arguments"`
	Id             *openapi_types.UUID `json:"id,omitempty"`
	Message        Message             `json:"message"`
	RequestgroupId *openapi_types.UUID `json:"requestgroup_id,omitempty"`
	TaskState      TaskState           `json:"task_state"`
	ToolId         openapi_types.UUID  `json:"tool_id"`
}

// ToolRequestGroup defines model for ToolRequestGroup.
type ToolRequestGroup struct {
	CreatedAt    *time.Time          `json:"created_at,omitempty"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	ToolRequests []ToolRequest       `json:"tool_requests"`
}

// Usage defines model for Usage.
type Usage struct {
	InputTokens  int `json:"input_tokens"`
	OutputTokens int `json:"output_tokens"`
	TotalTokens  int `json:"total_tokens"`
}

// CreateProjectJSONBody defines parameters for CreateProject.
type CreateProjectJSONBody struct {
	Name          string   `json:"name"`
	RunResultTags []string `json:"run_result_tags"`
}

// CreateTaskJSONBody defines parameters for CreateTask.
type CreateTaskJSONBody struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// UpdateRunResultJSONBody defines parameters for UpdateRunResult.
type UpdateRunResultJSONBody struct {
	Result *string `json:"result,omitempty"`
}

// CreateRunToolJSONBody defines parameters for CreateRunTool.
type CreateRunToolJSONBody struct {
	Attributes        map[string]interface{} `json:"attributes"`
	Code              string                 `json:"code"`
	Description       string                 `json:"description"`
	IgnoredAttributes *[]string              `json:"ignored_attributes,omitempty"`
	Name              string                 `json:"name"`
}

// CreateToolSupervisorChainsJSONBody defines parameters for CreateToolSupervisorChains.
type CreateToolSupervisorChainsJSONBody = []ChainRequest

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody CreateProjectJSONBody

// CreateSupervisorJSONRequestBody defines body for CreateSupervisor for application/json ContentType.
type CreateSupervisorJSONRequestBody = Supervisor

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody CreateTaskJSONBody

// CreateSupervisionRequestJSONRequestBody defines body for CreateSupervisionRequest for application/json ContentType.
type CreateSupervisionRequestJSONRequestBody = SupervisionRequest

// CreateToolRequestJSONRequestBody defines body for CreateToolRequest for application/json ContentType.
type CreateToolRequestJSONRequestBody = ToolRequest

// UpdateRunResultJSONRequestBody defines body for UpdateRunResult for application/json ContentType.
type UpdateRunResultJSONRequestBody UpdateRunResultJSONBody

// UpdateRunStatusJSONRequestBody defines body for UpdateRunStatus for application/json ContentType.
type UpdateRunStatusJSONRequestBody = Status

// CreateRunToolJSONRequestBody defines body for CreateRunTool for application/json ContentType.
type CreateRunToolJSONRequestBody CreateRunToolJSONBody

// CreateSupervisionResultJSONRequestBody defines body for CreateSupervisionResult for application/json ContentType.
type CreateSupervisionResultJSONRequestBody = SupervisionResult

// CreateToolRequestGroupJSONRequestBody defines body for CreateToolRequestGroup for application/json ContentType.
type CreateToolRequestGroupJSONRequestBody = ToolRequestGroup

// CreateToolSupervisorChainsJSONRequestBody defines body for CreateToolSupervisorChains for application/json ContentType.
type CreateToolSupervisorChainsJSONRequestBody = CreateToolSupervisorChainsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetOpenAPI request
	GetOpenAPI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectWithBody request with any body
	CreateProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProject(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProject request
	GetProject(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupervisors request
	GetSupervisors(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSupervisorWithBody request with any body
	CreateSupervisorWithBody(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSupervisor(ctx context.Context, projectId openapi_types.UUID, body CreateSupervisorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectTasks request
	GetProjectTasks(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTaskWithBody request with any body
	CreateTaskWithBody(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTask(ctx context.Context, projectId openapi_types.UUID, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectTools request
	GetProjectTools(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequestGroup request
	GetRequestGroup(ctx context.Context, requestGroupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSupervisionRequestWithBody request with any body
	CreateSupervisionRequestWithBody(ctx context.Context, requestGroupId openapi_types.UUID, chainId openapi_types.UUID, supervisorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSupervisionRequest(ctx context.Context, requestGroupId openapi_types.UUID, chainId openapi_types.UUID, supervisorId openapi_types.UUID, body CreateSupervisionRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequestGroupStatus request
	GetRequestGroupStatus(ctx context.Context, requestGroupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateToolRequestWithBody request with any body
	CreateToolRequestWithBody(ctx context.Context, requestGroupId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateToolRequest(ctx context.Context, requestGroupId openapi_types.UUID, body CreateToolRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRunRequestGroups request
	GetRunRequestGroups(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRunResultWithBody request with any body
	UpdateRunResultWithBody(ctx context.Context, runId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRunResult(ctx context.Context, runId openapi_types.UUID, body UpdateRunResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRunState request
	GetRunState(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRunStatus request
	GetRunStatus(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRunStatusWithBody request with any body
	UpdateRunStatusWithBody(ctx context.Context, runId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRunStatus(ctx context.Context, runId openapi_types.UUID, body UpdateRunStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRunTools request
	GetRunTools(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRunToolWithBody request with any body
	CreateRunToolWithBody(ctx context.Context, runId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRunTool(ctx context.Context, runId openapi_types.UUID, body CreateRunToolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHubStats request
	GetHubStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupervisionResult request
	GetSupervisionResult(ctx context.Context, supervisionRequestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSupervisionResultWithBody request with any body
	CreateSupervisionResultWithBody(ctx context.Context, supervisionRequestId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSupervisionResult(ctx context.Context, supervisionRequestId openapi_types.UUID, body CreateSupervisionResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupervisionReviewPayload request
	GetSupervisionReviewPayload(ctx context.Context, supervisionRequestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupervisionRequestStatus request
	GetSupervisionRequestStatus(ctx context.Context, supervisionRequestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupervisor request
	GetSupervisor(ctx context.Context, supervisorId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwaggerDocs request
	GetSwaggerDocs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTask request
	GetTask(ctx context.Context, taskId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskRuns request
	GetTaskRuns(ctx context.Context, taskId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRun request
	CreateRun(ctx context.Context, taskId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTool request
	GetTool(ctx context.Context, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateToolRequestGroupWithBody request with any body
	CreateToolRequestGroupWithBody(ctx context.Context, toolId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateToolRequestGroup(ctx context.Context, toolId openapi_types.UUID, body CreateToolRequestGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetToolSupervisorChains request
	GetToolSupervisorChains(ctx context.Context, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateToolSupervisorChainsWithBody request with any body
	CreateToolSupervisorChainsWithBody(ctx context.Context, toolId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateToolSupervisorChains(ctx context.Context, toolId openapi_types.UUID, body CreateToolSupervisorChainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetOpenAPI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenAPIRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProject(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProject(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupervisors(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupervisorsRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSupervisorWithBody(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSupervisorRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSupervisor(ctx context.Context, projectId openapi_types.UUID, body CreateSupervisorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSupervisorRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectTasks(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectTasksRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTaskWithBody(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaskRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTask(ctx context.Context, projectId openapi_types.UUID, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaskRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectTools(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectToolsRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequestGroup(ctx context.Context, requestGroupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequestGroupRequest(c.Server, requestGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSupervisionRequestWithBody(ctx context.Context, requestGroupId openapi_types.UUID, chainId openapi_types.UUID, supervisorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSupervisionRequestRequestWithBody(c.Server, requestGroupId, chainId, supervisorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSupervisionRequest(ctx context.Context, requestGroupId openapi_types.UUID, chainId openapi_types.UUID, supervisorId openapi_types.UUID, body CreateSupervisionRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSupervisionRequestRequest(c.Server, requestGroupId, chainId, supervisorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequestGroupStatus(ctx context.Context, requestGroupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequestGroupStatusRequest(c.Server, requestGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateToolRequestWithBody(ctx context.Context, requestGroupId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateToolRequestRequestWithBody(c.Server, requestGroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateToolRequest(ctx context.Context, requestGroupId openapi_types.UUID, body CreateToolRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateToolRequestRequest(c.Server, requestGroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRunRequestGroups(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunRequestGroupsRequest(c.Server, runId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRunResultWithBody(ctx context.Context, runId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRunResultRequestWithBody(c.Server, runId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRunResult(ctx context.Context, runId openapi_types.UUID, body UpdateRunResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRunResultRequest(c.Server, runId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRunState(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunStateRequest(c.Server, runId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRunStatus(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunStatusRequest(c.Server, runId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRunStatusWithBody(ctx context.Context, runId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRunStatusRequestWithBody(c.Server, runId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRunStatus(ctx context.Context, runId openapi_types.UUID, body UpdateRunStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRunStatusRequest(c.Server, runId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRunTools(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunToolsRequest(c.Server, runId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRunToolWithBody(ctx context.Context, runId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRunToolRequestWithBody(c.Server, runId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRunTool(ctx context.Context, runId openapi_types.UUID, body CreateRunToolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRunToolRequest(c.Server, runId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHubStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHubStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupervisionResult(ctx context.Context, supervisionRequestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupervisionResultRequest(c.Server, supervisionRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSupervisionResultWithBody(ctx context.Context, supervisionRequestId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSupervisionResultRequestWithBody(c.Server, supervisionRequestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSupervisionResult(ctx context.Context, supervisionRequestId openapi_types.UUID, body CreateSupervisionResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSupervisionResultRequest(c.Server, supervisionRequestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupervisionReviewPayload(ctx context.Context, supervisionRequestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupervisionReviewPayloadRequest(c.Server, supervisionRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupervisionRequestStatus(ctx context.Context, supervisionRequestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupervisionRequestStatusRequest(c.Server, supervisionRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupervisor(ctx context.Context, supervisorId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupervisorRequest(c.Server, supervisorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwaggerDocs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwaggerDocsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTask(ctx context.Context, taskId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskRuns(ctx context.Context, taskId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskRunsRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRun(ctx context.Context, taskId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRunRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTool(ctx context.Context, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetToolRequest(c.Server, toolId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateToolRequestGroupWithBody(ctx context.Context, toolId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateToolRequestGroupRequestWithBody(c.Server, toolId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateToolRequestGroup(ctx context.Context, toolId openapi_types.UUID, body CreateToolRequestGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateToolRequestGroupRequest(c.Server, toolId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetToolSupervisorChains(ctx context.Context, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetToolSupervisorChainsRequest(c.Server, toolId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateToolSupervisorChainsWithBody(ctx context.Context, toolId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateToolSupervisorChainsRequestWithBody(c.Server, toolId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateToolSupervisorChains(ctx context.Context, toolId openapi_types.UUID, body CreateToolSupervisorChainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateToolSupervisorChainsRequest(c.Server, toolId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetOpenAPIRequest generates requests for GetOpenAPI
func NewGetOpenAPIRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/openapi.yaml")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectRequest calls the generic CreateProject builder with application/json body
func NewCreateProjectRequest(server string, body CreateProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProjectRequestWithBody generates requests for CreateProject with any type of body
func NewCreateProjectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectRequest generates requests for GetProject
func NewGetProjectRequest(server string, projectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSupervisorsRequest generates requests for GetSupervisors
func NewGetSupervisorsRequest(server string, projectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project/%s/supervisor", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSupervisorRequest calls the generic CreateSupervisor builder with application/json body
func NewCreateSupervisorRequest(server string, projectId openapi_types.UUID, body CreateSupervisorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSupervisorRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewCreateSupervisorRequestWithBody generates requests for CreateSupervisor with any type of body
func NewCreateSupervisorRequestWithBody(server string, projectId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project/%s/supervisor", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectTasksRequest generates requests for GetProjectTasks
func NewGetProjectTasksRequest(server string, projectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTaskRequest calls the generic CreateTask builder with application/json body
func NewCreateTaskRequest(server string, projectId openapi_types.UUID, body CreateTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTaskRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewCreateTaskRequestWithBody generates requests for CreateTask with any type of body
func NewCreateTaskRequestWithBody(server string, projectId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectToolsRequest generates requests for GetProjectTools
func NewGetProjectToolsRequest(server string, projectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project/%s/tools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequestGroupRequest generates requests for GetRequestGroup
func NewGetRequestGroupRequest(server string, requestGroupId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestGroupId", runtime.ParamLocationPath, requestGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/request_group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSupervisionRequestRequest calls the generic CreateSupervisionRequest builder with application/json body
func NewCreateSupervisionRequestRequest(server string, requestGroupId openapi_types.UUID, chainId openapi_types.UUID, supervisorId openapi_types.UUID, body CreateSupervisionRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSupervisionRequestRequestWithBody(server, requestGroupId, chainId, supervisorId, "application/json", bodyReader)
}

// NewCreateSupervisionRequestRequestWithBody generates requests for CreateSupervisionRequest with any type of body
func NewCreateSupervisionRequestRequestWithBody(server string, requestGroupId openapi_types.UUID, chainId openapi_types.UUID, supervisorId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestGroupId", runtime.ParamLocationPath, requestGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "chainId", runtime.ParamLocationPath, chainId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "supervisorId", runtime.ParamLocationPath, supervisorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/request_group/%s/chain/%s/supervisor/%s/supervision_request", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRequestGroupStatusRequest generates requests for GetRequestGroupStatus
func NewGetRequestGroupStatusRequest(server string, requestGroupId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestGroupId", runtime.ParamLocationPath, requestGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/request_group/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateToolRequestRequest calls the generic CreateToolRequest builder with application/json body
func NewCreateToolRequestRequest(server string, requestGroupId openapi_types.UUID, body CreateToolRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateToolRequestRequestWithBody(server, requestGroupId, "application/json", bodyReader)
}

// NewCreateToolRequestRequestWithBody generates requests for CreateToolRequest with any type of body
func NewCreateToolRequestRequestWithBody(server string, requestGroupId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestGroupId", runtime.ParamLocationPath, requestGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/request_group/%s/tool_requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRunRequestGroupsRequest generates requests for GetRunRequestGroups
func NewGetRunRequestGroupsRequest(server string, runId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/run/%s/request_groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRunResultRequest calls the generic UpdateRunResult builder with application/json body
func NewUpdateRunResultRequest(server string, runId openapi_types.UUID, body UpdateRunResultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRunResultRequestWithBody(server, runId, "application/json", bodyReader)
}

// NewUpdateRunResultRequestWithBody generates requests for UpdateRunResult with any type of body
func NewUpdateRunResultRequestWithBody(server string, runId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/run/%s/result", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRunStateRequest generates requests for GetRunState
func NewGetRunStateRequest(server string, runId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/run/%s/state", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRunStatusRequest generates requests for GetRunStatus
func NewGetRunStatusRequest(server string, runId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/run/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRunStatusRequest calls the generic UpdateRunStatus builder with application/json body
func NewUpdateRunStatusRequest(server string, runId openapi_types.UUID, body UpdateRunStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRunStatusRequestWithBody(server, runId, "application/json", bodyReader)
}

// NewUpdateRunStatusRequestWithBody generates requests for UpdateRunStatus with any type of body
func NewUpdateRunStatusRequestWithBody(server string, runId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/run/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRunToolsRequest generates requests for GetRunTools
func NewGetRunToolsRequest(server string, runId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/run/%s/tool", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRunToolRequest calls the generic CreateRunTool builder with application/json body
func NewCreateRunToolRequest(server string, runId openapi_types.UUID, body CreateRunToolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRunToolRequestWithBody(server, runId, "application/json", bodyReader)
}

// NewCreateRunToolRequestWithBody generates requests for CreateRunTool with any type of body
func NewCreateRunToolRequestWithBody(server string, runId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/run/%s/tool", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHubStatsRequest generates requests for GetHubStats
func NewGetHubStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSupervisionResultRequest generates requests for GetSupervisionResult
func NewGetSupervisionResultRequest(server string, supervisionRequestId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supervisionRequestId", runtime.ParamLocationPath, supervisionRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/supervision_request/%s/result", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSupervisionResultRequest calls the generic CreateSupervisionResult builder with application/json body
func NewCreateSupervisionResultRequest(server string, supervisionRequestId openapi_types.UUID, body CreateSupervisionResultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSupervisionResultRequestWithBody(server, supervisionRequestId, "application/json", bodyReader)
}

// NewCreateSupervisionResultRequestWithBody generates requests for CreateSupervisionResult with any type of body
func NewCreateSupervisionResultRequestWithBody(server string, supervisionRequestId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supervisionRequestId", runtime.ParamLocationPath, supervisionRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/supervision_request/%s/result", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSupervisionReviewPayloadRequest generates requests for GetSupervisionReviewPayload
func NewGetSupervisionReviewPayloadRequest(server string, supervisionRequestId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supervisionRequestId", runtime.ParamLocationPath, supervisionRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/supervision_request/%s/review_payload", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSupervisionRequestStatusRequest generates requests for GetSupervisionRequestStatus
func NewGetSupervisionRequestStatusRequest(server string, supervisionRequestId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supervisionRequestId", runtime.ParamLocationPath, supervisionRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/supervision_request/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSupervisorRequest generates requests for GetSupervisor
func NewGetSupervisorRequest(server string, supervisorId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supervisorId", runtime.ParamLocationPath, supervisorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/supervisor/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSwaggerDocsRequest generates requests for GetSwaggerDocs
func NewGetSwaggerDocsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swagger-ui")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskRequest generates requests for GetTask
func NewGetTaskRequest(server string, taskId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/task/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskRunsRequest generates requests for GetTaskRuns
func NewGetTaskRunsRequest(server string, taskId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/task/%s/run", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRunRequest generates requests for CreateRun
func NewCreateRunRequest(server string, taskId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/task/%s/run", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetToolRequest generates requests for GetTool
func NewGetToolRequest(server string, toolId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "toolId", runtime.ParamLocationPath, toolId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tool/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateToolRequestGroupRequest calls the generic CreateToolRequestGroup builder with application/json body
func NewCreateToolRequestGroupRequest(server string, toolId openapi_types.UUID, body CreateToolRequestGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateToolRequestGroupRequestWithBody(server, toolId, "application/json", bodyReader)
}

// NewCreateToolRequestGroupRequestWithBody generates requests for CreateToolRequestGroup with any type of body
func NewCreateToolRequestGroupRequestWithBody(server string, toolId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "toolId", runtime.ParamLocationPath, toolId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tool/%s/request_group", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetToolSupervisorChainsRequest generates requests for GetToolSupervisorChains
func NewGetToolSupervisorChainsRequest(server string, toolId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "toolId", runtime.ParamLocationPath, toolId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tool/%s/supervisors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateToolSupervisorChainsRequest calls the generic CreateToolSupervisorChains builder with application/json body
func NewCreateToolSupervisorChainsRequest(server string, toolId openapi_types.UUID, body CreateToolSupervisorChainsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateToolSupervisorChainsRequestWithBody(server, toolId, "application/json", bodyReader)
}

// NewCreateToolSupervisorChainsRequestWithBody generates requests for CreateToolSupervisorChains with any type of body
func NewCreateToolSupervisorChainsRequestWithBody(server string, toolId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "toolId", runtime.ParamLocationPath, toolId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tool/%s/supervisors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetOpenAPIWithResponse request
	GetOpenAPIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenAPIResponse, error)

	// GetProjectsWithResponse request
	GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error)

	// CreateProjectWithBodyWithResponse request with any body
	CreateProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error)

	CreateProjectWithResponse(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error)

	// GetProjectWithResponse request
	GetProjectWithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProjectResponse, error)

	// GetSupervisorsWithResponse request
	GetSupervisorsWithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSupervisorsResponse, error)

	// CreateSupervisorWithBodyWithResponse request with any body
	CreateSupervisorWithBodyWithResponse(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSupervisorResponse, error)

	CreateSupervisorWithResponse(ctx context.Context, projectId openapi_types.UUID, body CreateSupervisorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSupervisorResponse, error)

	// GetProjectTasksWithResponse request
	GetProjectTasksWithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProjectTasksResponse, error)

	// CreateTaskWithBodyWithResponse request with any body
	CreateTaskWithBodyWithResponse(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error)

	CreateTaskWithResponse(ctx context.Context, projectId openapi_types.UUID, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error)

	// GetProjectToolsWithResponse request
	GetProjectToolsWithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProjectToolsResponse, error)

	// GetRequestGroupWithResponse request
	GetRequestGroupWithResponse(ctx context.Context, requestGroupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRequestGroupResponse, error)

	// CreateSupervisionRequestWithBodyWithResponse request with any body
	CreateSupervisionRequestWithBodyWithResponse(ctx context.Context, requestGroupId openapi_types.UUID, chainId openapi_types.UUID, supervisorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSupervisionRequestResponse, error)

	CreateSupervisionRequestWithResponse(ctx context.Context, requestGroupId openapi_types.UUID, chainId openapi_types.UUID, supervisorId openapi_types.UUID, body CreateSupervisionRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSupervisionRequestResponse, error)

	// GetRequestGroupStatusWithResponse request
	GetRequestGroupStatusWithResponse(ctx context.Context, requestGroupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRequestGroupStatusResponse, error)

	// CreateToolRequestWithBodyWithResponse request with any body
	CreateToolRequestWithBodyWithResponse(ctx context.Context, requestGroupId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateToolRequestResponse, error)

	CreateToolRequestWithResponse(ctx context.Context, requestGroupId openapi_types.UUID, body CreateToolRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateToolRequestResponse, error)

	// GetRunRequestGroupsWithResponse request
	GetRunRequestGroupsWithResponse(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRunRequestGroupsResponse, error)

	// UpdateRunResultWithBodyWithResponse request with any body
	UpdateRunResultWithBodyWithResponse(ctx context.Context, runId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRunResultResponse, error)

	UpdateRunResultWithResponse(ctx context.Context, runId openapi_types.UUID, body UpdateRunResultJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRunResultResponse, error)

	// GetRunStateWithResponse request
	GetRunStateWithResponse(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRunStateResponse, error)

	// GetRunStatusWithResponse request
	GetRunStatusWithResponse(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRunStatusResponse, error)

	// UpdateRunStatusWithBodyWithResponse request with any body
	UpdateRunStatusWithBodyWithResponse(ctx context.Context, runId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRunStatusResponse, error)

	UpdateRunStatusWithResponse(ctx context.Context, runId openapi_types.UUID, body UpdateRunStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRunStatusResponse, error)

	// GetRunToolsWithResponse request
	GetRunToolsWithResponse(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRunToolsResponse, error)

	// CreateRunToolWithBodyWithResponse request with any body
	CreateRunToolWithBodyWithResponse(ctx context.Context, runId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRunToolResponse, error)

	CreateRunToolWithResponse(ctx context.Context, runId openapi_types.UUID, body CreateRunToolJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRunToolResponse, error)

	// GetHubStatsWithResponse request
	GetHubStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHubStatsResponse, error)

	// GetSupervisionResultWithResponse request
	GetSupervisionResultWithResponse(ctx context.Context, supervisionRequestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSupervisionResultResponse, error)

	// CreateSupervisionResultWithBodyWithResponse request with any body
	CreateSupervisionResultWithBodyWithResponse(ctx context.Context, supervisionRequestId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSupervisionResultResponse, error)

	CreateSupervisionResultWithResponse(ctx context.Context, supervisionRequestId openapi_types.UUID, body CreateSupervisionResultJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSupervisionResultResponse, error)

	// GetSupervisionReviewPayloadWithResponse request
	GetSupervisionReviewPayloadWithResponse(ctx context.Context, supervisionRequestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSupervisionReviewPayloadResponse, error)

	// GetSupervisionRequestStatusWithResponse request
	GetSupervisionRequestStatusWithResponse(ctx context.Context, supervisionRequestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSupervisionRequestStatusResponse, error)

	// GetSupervisorWithResponse request
	GetSupervisorWithResponse(ctx context.Context, supervisorId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSupervisorResponse, error)

	// GetSwaggerDocsWithResponse request
	GetSwaggerDocsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerDocsResponse, error)

	// GetTaskWithResponse request
	GetTaskWithResponse(ctx context.Context, taskId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTaskResponse, error)

	// GetTaskRunsWithResponse request
	GetTaskRunsWithResponse(ctx context.Context, taskId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTaskRunsResponse, error)

	// CreateRunWithResponse request
	CreateRunWithResponse(ctx context.Context, taskId openapi_types.UUID, reqEditors ...RequestEditorFn) (*CreateRunResponse, error)

	// GetToolWithResponse request
	GetToolWithResponse(ctx context.Context, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetToolResponse, error)

	// CreateToolRequestGroupWithBodyWithResponse request with any body
	CreateToolRequestGroupWithBodyWithResponse(ctx context.Context, toolId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateToolRequestGroupResponse, error)

	CreateToolRequestGroupWithResponse(ctx context.Context, toolId openapi_types.UUID, body CreateToolRequestGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateToolRequestGroupResponse, error)

	// GetToolSupervisorChainsWithResponse request
	GetToolSupervisorChainsWithResponse(ctx context.Context, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetToolSupervisorChainsResponse, error)

	// CreateToolSupervisorChainsWithBodyWithResponse request with any body
	CreateToolSupervisorChainsWithBodyWithResponse(ctx context.Context, toolId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateToolSupervisorChainsResponse, error)

	CreateToolSupervisorChainsWithResponse(ctx context.Context, toolId openapi_types.UUID, body CreateToolSupervisorChainsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateToolSupervisorChainsResponse, error)
}

type GetOpenAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOpenAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Project
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.UUID
	JSON201      *openapi_types.UUID
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupervisorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Supervisor
}

// Status returns HTTPResponse.Status
func (r GetSupervisorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupervisorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSupervisorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *openapi_types.UUID
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateSupervisorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSupervisorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Task
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *openapi_types.UUID
}

// Status returns HTTPResponse.Status
func (r CreateTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectToolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Tool
}

// Status returns HTTPResponse.Status
func (r GetProjectToolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectToolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequestGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolRequestGroup
}

// Status returns HTTPResponse.Status
func (r GetRequestGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSupervisionRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *openapi_types.UUID
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateSupervisionRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSupervisionRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequestGroupStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r GetRequestGroupStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestGroupStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateToolRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *openapi_types.UUID
}

// Status returns HTTPResponse.Status
func (r CreateToolRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateToolRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunRequestGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ToolRequestGroup
}

// Status returns HTTPResponse.Status
func (r GetRunRequestGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunRequestGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRunResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateRunResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRunResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RunState
}

// Status returns HTTPResponse.Status
func (r GetRunStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetRunStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRunStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateRunStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRunStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunToolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Tool
}

// Status returns HTTPResponse.Status
func (r GetRunToolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunToolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRunToolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.UUID
	JSON201      *openapi_types.UUID
}

// Status returns HTTPResponse.Status
func (r CreateRunToolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRunToolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHubStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HubStats
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetHubStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHubStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupervisionResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SupervisionResult
}

// Status returns HTTPResponse.Status
func (r GetSupervisionResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupervisionResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSupervisionResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *openapi_types.UUID
}

// Status returns HTTPResponse.Status
func (r CreateSupervisionResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSupervisionResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupervisionReviewPayloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReviewPayload
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSupervisionReviewPayloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupervisionReviewPayloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupervisionRequestStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SupervisionStatus
}

// Status returns HTTPResponse.Status
func (r GetSupervisionRequestStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupervisionRequestStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupervisorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Supervisor
}

// Status returns HTTPResponse.Status
func (r GetSupervisorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupervisorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwaggerDocsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSwaggerDocsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwaggerDocsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r GetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskRunsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Run
}

// Status returns HTTPResponse.Status
func (r GetTaskRunsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskRunsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *openapi_types.UUID
}

// Status returns HTTPResponse.Status
func (r CreateRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetToolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tool
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetToolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetToolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateToolRequestGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ToolRequestGroup
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateToolRequestGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateToolRequestGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetToolSupervisorChainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SupervisorChain
}

// Status returns HTTPResponse.Status
func (r GetToolSupervisorChainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetToolSupervisorChainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateToolSupervisorChainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]openapi_types.UUID
}

// Status returns HTTPResponse.Status
func (r CreateToolSupervisorChainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateToolSupervisorChainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetOpenAPIWithResponse request returning *GetOpenAPIResponse
func (c *ClientWithResponses) GetOpenAPIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenAPIResponse, error) {
	rsp, err := c.GetOpenAPI(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenAPIResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// CreateProjectWithBodyWithResponse request with arbitrary body returning *CreateProjectResponse
func (c *ClientWithResponses) CreateProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error) {
	rsp, err := c.CreateProjectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectWithResponse(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error) {
	rsp, err := c.CreateProject(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResponse(rsp)
}

// GetProjectWithResponse request returning *GetProjectResponse
func (c *ClientWithResponses) GetProjectWithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProjectResponse, error) {
	rsp, err := c.GetProject(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectResponse(rsp)
}

// GetSupervisorsWithResponse request returning *GetSupervisorsResponse
func (c *ClientWithResponses) GetSupervisorsWithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSupervisorsResponse, error) {
	rsp, err := c.GetSupervisors(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupervisorsResponse(rsp)
}

// CreateSupervisorWithBodyWithResponse request with arbitrary body returning *CreateSupervisorResponse
func (c *ClientWithResponses) CreateSupervisorWithBodyWithResponse(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSupervisorResponse, error) {
	rsp, err := c.CreateSupervisorWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSupervisorResponse(rsp)
}

func (c *ClientWithResponses) CreateSupervisorWithResponse(ctx context.Context, projectId openapi_types.UUID, body CreateSupervisorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSupervisorResponse, error) {
	rsp, err := c.CreateSupervisor(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSupervisorResponse(rsp)
}

// GetProjectTasksWithResponse request returning *GetProjectTasksResponse
func (c *ClientWithResponses) GetProjectTasksWithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProjectTasksResponse, error) {
	rsp, err := c.GetProjectTasks(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectTasksResponse(rsp)
}

// CreateTaskWithBodyWithResponse request with arbitrary body returning *CreateTaskResponse
func (c *ClientWithResponses) CreateTaskWithBodyWithResponse(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error) {
	rsp, err := c.CreateTaskWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaskResponse(rsp)
}

func (c *ClientWithResponses) CreateTaskWithResponse(ctx context.Context, projectId openapi_types.UUID, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error) {
	rsp, err := c.CreateTask(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaskResponse(rsp)
}

// GetProjectToolsWithResponse request returning *GetProjectToolsResponse
func (c *ClientWithResponses) GetProjectToolsWithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProjectToolsResponse, error) {
	rsp, err := c.GetProjectTools(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectToolsResponse(rsp)
}

// GetRequestGroupWithResponse request returning *GetRequestGroupResponse
func (c *ClientWithResponses) GetRequestGroupWithResponse(ctx context.Context, requestGroupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRequestGroupResponse, error) {
	rsp, err := c.GetRequestGroup(ctx, requestGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequestGroupResponse(rsp)
}

// CreateSupervisionRequestWithBodyWithResponse request with arbitrary body returning *CreateSupervisionRequestResponse
func (c *ClientWithResponses) CreateSupervisionRequestWithBodyWithResponse(ctx context.Context, requestGroupId openapi_types.UUID, chainId openapi_types.UUID, supervisorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSupervisionRequestResponse, error) {
	rsp, err := c.CreateSupervisionRequestWithBody(ctx, requestGroupId, chainId, supervisorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSupervisionRequestResponse(rsp)
}

func (c *ClientWithResponses) CreateSupervisionRequestWithResponse(ctx context.Context, requestGroupId openapi_types.UUID, chainId openapi_types.UUID, supervisorId openapi_types.UUID, body CreateSupervisionRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSupervisionRequestResponse, error) {
	rsp, err := c.CreateSupervisionRequest(ctx, requestGroupId, chainId, supervisorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSupervisionRequestResponse(rsp)
}

// GetRequestGroupStatusWithResponse request returning *GetRequestGroupStatusResponse
func (c *ClientWithResponses) GetRequestGroupStatusWithResponse(ctx context.Context, requestGroupId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRequestGroupStatusResponse, error) {
	rsp, err := c.GetRequestGroupStatus(ctx, requestGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequestGroupStatusResponse(rsp)
}

// CreateToolRequestWithBodyWithResponse request with arbitrary body returning *CreateToolRequestResponse
func (c *ClientWithResponses) CreateToolRequestWithBodyWithResponse(ctx context.Context, requestGroupId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateToolRequestResponse, error) {
	rsp, err := c.CreateToolRequestWithBody(ctx, requestGroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateToolRequestResponse(rsp)
}

func (c *ClientWithResponses) CreateToolRequestWithResponse(ctx context.Context, requestGroupId openapi_types.UUID, body CreateToolRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateToolRequestResponse, error) {
	rsp, err := c.CreateToolRequest(ctx, requestGroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateToolRequestResponse(rsp)
}

// GetRunRequestGroupsWithResponse request returning *GetRunRequestGroupsResponse
func (c *ClientWithResponses) GetRunRequestGroupsWithResponse(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRunRequestGroupsResponse, error) {
	rsp, err := c.GetRunRequestGroups(ctx, runId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunRequestGroupsResponse(rsp)
}

// UpdateRunResultWithBodyWithResponse request with arbitrary body returning *UpdateRunResultResponse
func (c *ClientWithResponses) UpdateRunResultWithBodyWithResponse(ctx context.Context, runId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRunResultResponse, error) {
	rsp, err := c.UpdateRunResultWithBody(ctx, runId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRunResultResponse(rsp)
}

func (c *ClientWithResponses) UpdateRunResultWithResponse(ctx context.Context, runId openapi_types.UUID, body UpdateRunResultJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRunResultResponse, error) {
	rsp, err := c.UpdateRunResult(ctx, runId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRunResultResponse(rsp)
}

// GetRunStateWithResponse request returning *GetRunStateResponse
func (c *ClientWithResponses) GetRunStateWithResponse(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRunStateResponse, error) {
	rsp, err := c.GetRunState(ctx, runId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunStateResponse(rsp)
}

// GetRunStatusWithResponse request returning *GetRunStatusResponse
func (c *ClientWithResponses) GetRunStatusWithResponse(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRunStatusResponse, error) {
	rsp, err := c.GetRunStatus(ctx, runId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunStatusResponse(rsp)
}

// UpdateRunStatusWithBodyWithResponse request with arbitrary body returning *UpdateRunStatusResponse
func (c *ClientWithResponses) UpdateRunStatusWithBodyWithResponse(ctx context.Context, runId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRunStatusResponse, error) {
	rsp, err := c.UpdateRunStatusWithBody(ctx, runId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRunStatusResponse(rsp)
}

func (c *ClientWithResponses) UpdateRunStatusWithResponse(ctx context.Context, runId openapi_types.UUID, body UpdateRunStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRunStatusResponse, error) {
	rsp, err := c.UpdateRunStatus(ctx, runId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRunStatusResponse(rsp)
}

// GetRunToolsWithResponse request returning *GetRunToolsResponse
func (c *ClientWithResponses) GetRunToolsWithResponse(ctx context.Context, runId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRunToolsResponse, error) {
	rsp, err := c.GetRunTools(ctx, runId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunToolsResponse(rsp)
}

// CreateRunToolWithBodyWithResponse request with arbitrary body returning *CreateRunToolResponse
func (c *ClientWithResponses) CreateRunToolWithBodyWithResponse(ctx context.Context, runId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRunToolResponse, error) {
	rsp, err := c.CreateRunToolWithBody(ctx, runId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRunToolResponse(rsp)
}

func (c *ClientWithResponses) CreateRunToolWithResponse(ctx context.Context, runId openapi_types.UUID, body CreateRunToolJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRunToolResponse, error) {
	rsp, err := c.CreateRunTool(ctx, runId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRunToolResponse(rsp)
}

// GetHubStatsWithResponse request returning *GetHubStatsResponse
func (c *ClientWithResponses) GetHubStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHubStatsResponse, error) {
	rsp, err := c.GetHubStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHubStatsResponse(rsp)
}

// GetSupervisionResultWithResponse request returning *GetSupervisionResultResponse
func (c *ClientWithResponses) GetSupervisionResultWithResponse(ctx context.Context, supervisionRequestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSupervisionResultResponse, error) {
	rsp, err := c.GetSupervisionResult(ctx, supervisionRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupervisionResultResponse(rsp)
}

// CreateSupervisionResultWithBodyWithResponse request with arbitrary body returning *CreateSupervisionResultResponse
func (c *ClientWithResponses) CreateSupervisionResultWithBodyWithResponse(ctx context.Context, supervisionRequestId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSupervisionResultResponse, error) {
	rsp, err := c.CreateSupervisionResultWithBody(ctx, supervisionRequestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSupervisionResultResponse(rsp)
}

func (c *ClientWithResponses) CreateSupervisionResultWithResponse(ctx context.Context, supervisionRequestId openapi_types.UUID, body CreateSupervisionResultJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSupervisionResultResponse, error) {
	rsp, err := c.CreateSupervisionResult(ctx, supervisionRequestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSupervisionResultResponse(rsp)
}

// GetSupervisionReviewPayloadWithResponse request returning *GetSupervisionReviewPayloadResponse
func (c *ClientWithResponses) GetSupervisionReviewPayloadWithResponse(ctx context.Context, supervisionRequestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSupervisionReviewPayloadResponse, error) {
	rsp, err := c.GetSupervisionReviewPayload(ctx, supervisionRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupervisionReviewPayloadResponse(rsp)
}

// GetSupervisionRequestStatusWithResponse request returning *GetSupervisionRequestStatusResponse
func (c *ClientWithResponses) GetSupervisionRequestStatusWithResponse(ctx context.Context, supervisionRequestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSupervisionRequestStatusResponse, error) {
	rsp, err := c.GetSupervisionRequestStatus(ctx, supervisionRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupervisionRequestStatusResponse(rsp)
}

// GetSupervisorWithResponse request returning *GetSupervisorResponse
func (c *ClientWithResponses) GetSupervisorWithResponse(ctx context.Context, supervisorId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSupervisorResponse, error) {
	rsp, err := c.GetSupervisor(ctx, supervisorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupervisorResponse(rsp)
}

// GetSwaggerDocsWithResponse request returning *GetSwaggerDocsResponse
func (c *ClientWithResponses) GetSwaggerDocsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerDocsResponse, error) {
	rsp, err := c.GetSwaggerDocs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwaggerDocsResponse(rsp)
}

// GetTaskWithResponse request returning *GetTaskResponse
func (c *ClientWithResponses) GetTaskWithResponse(ctx context.Context, taskId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTaskResponse, error) {
	rsp, err := c.GetTask(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskResponse(rsp)
}

// GetTaskRunsWithResponse request returning *GetTaskRunsResponse
func (c *ClientWithResponses) GetTaskRunsWithResponse(ctx context.Context, taskId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTaskRunsResponse, error) {
	rsp, err := c.GetTaskRuns(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskRunsResponse(rsp)
}

// CreateRunWithResponse request returning *CreateRunResponse
func (c *ClientWithResponses) CreateRunWithResponse(ctx context.Context, taskId openapi_types.UUID, reqEditors ...RequestEditorFn) (*CreateRunResponse, error) {
	rsp, err := c.CreateRun(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRunResponse(rsp)
}

// GetToolWithResponse request returning *GetToolResponse
func (c *ClientWithResponses) GetToolWithResponse(ctx context.Context, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetToolResponse, error) {
	rsp, err := c.GetTool(ctx, toolId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetToolResponse(rsp)
}

// CreateToolRequestGroupWithBodyWithResponse request with arbitrary body returning *CreateToolRequestGroupResponse
func (c *ClientWithResponses) CreateToolRequestGroupWithBodyWithResponse(ctx context.Context, toolId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateToolRequestGroupResponse, error) {
	rsp, err := c.CreateToolRequestGroupWithBody(ctx, toolId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateToolRequestGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateToolRequestGroupWithResponse(ctx context.Context, toolId openapi_types.UUID, body CreateToolRequestGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateToolRequestGroupResponse, error) {
	rsp, err := c.CreateToolRequestGroup(ctx, toolId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateToolRequestGroupResponse(rsp)
}

// GetToolSupervisorChainsWithResponse request returning *GetToolSupervisorChainsResponse
func (c *ClientWithResponses) GetToolSupervisorChainsWithResponse(ctx context.Context, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetToolSupervisorChainsResponse, error) {
	rsp, err := c.GetToolSupervisorChains(ctx, toolId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetToolSupervisorChainsResponse(rsp)
}

// CreateToolSupervisorChainsWithBodyWithResponse request with arbitrary body returning *CreateToolSupervisorChainsResponse
func (c *ClientWithResponses) CreateToolSupervisorChainsWithBodyWithResponse(ctx context.Context, toolId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateToolSupervisorChainsResponse, error) {
	rsp, err := c.CreateToolSupervisorChainsWithBody(ctx, toolId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateToolSupervisorChainsResponse(rsp)
}

func (c *ClientWithResponses) CreateToolSupervisorChainsWithResponse(ctx context.Context, toolId openapi_types.UUID, body CreateToolSupervisorChainsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateToolSupervisorChainsResponse, error) {
	rsp, err := c.CreateToolSupervisorChains(ctx, toolId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateToolSupervisorChainsResponse(rsp)
}

// ParseGetOpenAPIResponse parses an HTTP response from a GetOpenAPIWithResponse call
func ParseGetOpenAPIResponse(rsp *http.Response) (*GetOpenAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProjectResponse parses an HTTP response from a CreateProjectWithResponse call
func ParseCreateProjectResponse(rsp *http.Response) (*CreateProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.UUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest openapi_types.UUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProjectResponse parses an HTTP response from a GetProjectWithResponse call
func ParseGetProjectResponse(rsp *http.Response) (*GetProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSupervisorsResponse parses an HTTP response from a GetSupervisorsWithResponse call
func ParseGetSupervisorsResponse(rsp *http.Response) (*GetSupervisorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupervisorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Supervisor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSupervisorResponse parses an HTTP response from a CreateSupervisorWithResponse call
func ParseCreateSupervisorResponse(rsp *http.Response) (*CreateSupervisorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSupervisorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest openapi_types.UUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProjectTasksResponse parses an HTTP response from a GetProjectTasksWithResponse call
func ParseGetProjectTasksResponse(rsp *http.Response) (*GetProjectTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateTaskResponse parses an HTTP response from a CreateTaskWithResponse call
func ParseCreateTaskResponse(rsp *http.Response) (*CreateTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest openapi_types.UUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetProjectToolsResponse parses an HTTP response from a GetProjectToolsWithResponse call
func ParseGetProjectToolsResponse(rsp *http.Response) (*GetProjectToolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectToolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Tool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRequestGroupResponse parses an HTTP response from a GetRequestGroupWithResponse call
func ParseGetRequestGroupResponse(rsp *http.Response) (*GetRequestGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequestGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolRequestGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSupervisionRequestResponse parses an HTTP response from a CreateSupervisionRequestWithResponse call
func ParseCreateSupervisionRequestResponse(rsp *http.Response) (*CreateSupervisionRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSupervisionRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest openapi_types.UUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRequestGroupStatusResponse parses an HTTP response from a GetRequestGroupStatusWithResponse call
func ParseGetRequestGroupStatusResponse(rsp *http.Response) (*GetRequestGroupStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequestGroupStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateToolRequestResponse parses an HTTP response from a CreateToolRequestWithResponse call
func ParseCreateToolRequestResponse(rsp *http.Response) (*CreateToolRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateToolRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest openapi_types.UUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetRunRequestGroupsResponse parses an HTTP response from a GetRunRequestGroupsWithResponse call
func ParseGetRunRequestGroupsResponse(rsp *http.Response) (*GetRunRequestGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunRequestGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ToolRequestGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateRunResultResponse parses an HTTP response from a UpdateRunResultWithResponse call
func ParseUpdateRunResultResponse(rsp *http.Response) (*UpdateRunResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRunResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRunStateResponse parses an HTTP response from a GetRunStateWithResponse call
func ParseGetRunStateResponse(rsp *http.Response) (*GetRunStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RunState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRunStatusResponse parses an HTTP response from a GetRunStatusWithResponse call
func ParseGetRunStatusResponse(rsp *http.Response) (*GetRunStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRunStatusResponse parses an HTTP response from a UpdateRunStatusWithResponse call
func ParseUpdateRunStatusResponse(rsp *http.Response) (*UpdateRunStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRunStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRunToolsResponse parses an HTTP response from a GetRunToolsWithResponse call
func ParseGetRunToolsResponse(rsp *http.Response) (*GetRunToolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunToolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Tool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRunToolResponse parses an HTTP response from a CreateRunToolWithResponse call
func ParseCreateRunToolResponse(rsp *http.Response) (*CreateRunToolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRunToolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.UUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest openapi_types.UUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetHubStatsResponse parses an HTTP response from a GetHubStatsWithResponse call
func ParseGetHubStatsResponse(rsp *http.Response) (*GetHubStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHubStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HubStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSupervisionResultResponse parses an HTTP response from a GetSupervisionResultWithResponse call
func ParseGetSupervisionResultResponse(rsp *http.Response) (*GetSupervisionResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupervisionResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SupervisionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSupervisionResultResponse parses an HTTP response from a CreateSupervisionResultWithResponse call
func ParseCreateSupervisionResultResponse(rsp *http.Response) (*CreateSupervisionResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSupervisionResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest openapi_types.UUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetSupervisionReviewPayloadResponse parses an HTTP response from a GetSupervisionReviewPayloadWithResponse call
func ParseGetSupervisionReviewPayloadResponse(rsp *http.Response) (*GetSupervisionReviewPayloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupervisionReviewPayloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReviewPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSupervisionRequestStatusResponse parses an HTTP response from a GetSupervisionRequestStatusWithResponse call
func ParseGetSupervisionRequestStatusResponse(rsp *http.Response) (*GetSupervisionRequestStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupervisionRequestStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SupervisionStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSupervisorResponse parses an HTTP response from a GetSupervisorWithResponse call
func ParseGetSupervisorResponse(rsp *http.Response) (*GetSupervisorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupervisorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Supervisor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSwaggerDocsResponse parses an HTTP response from a GetSwaggerDocsWithResponse call
func ParseGetSwaggerDocsResponse(rsp *http.Response) (*GetSwaggerDocsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwaggerDocsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTaskResponse parses an HTTP response from a GetTaskWithResponse call
func ParseGetTaskResponse(rsp *http.Response) (*GetTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaskRunsResponse parses an HTTP response from a GetTaskRunsWithResponse call
func ParseGetTaskRunsResponse(rsp *http.Response) (*GetTaskRunsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskRunsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Run
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRunResponse parses an HTTP response from a CreateRunWithResponse call
func ParseCreateRunResponse(rsp *http.Response) (*CreateRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest openapi_types.UUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetToolResponse parses an HTTP response from a GetToolWithResponse call
func ParseGetToolResponse(rsp *http.Response) (*GetToolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetToolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateToolRequestGroupResponse parses an HTTP response from a CreateToolRequestGroupWithResponse call
func ParseCreateToolRequestGroupResponse(rsp *http.Response) (*CreateToolRequestGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateToolRequestGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ToolRequestGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetToolSupervisorChainsResponse parses an HTTP response from a GetToolSupervisorChainsWithResponse call
func ParseGetToolSupervisorChainsResponse(rsp *http.Response) (*GetToolSupervisorChainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetToolSupervisorChainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SupervisorChain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateToolSupervisorChainsResponse parses an HTTP response from a CreateToolSupervisorChainsWithResponse call
func ParseCreateToolSupervisorChainsResponse(rsp *http.Response) (*CreateToolSupervisorChainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateToolSupervisorChainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []openapi_types.UUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the OpenAPI schema
	// (GET /api/openapi.yaml)
	GetOpenAPI(w http.ResponseWriter, r *http.Request)
	// Get all projects
	// (GET /api/project)
	GetProjects(w http.ResponseWriter, r *http.Request)
	// Create a new project
	// (POST /api/project)
	CreateProject(w http.ResponseWriter, r *http.Request)
	// Get a project
	// (GET /api/project/{projectId})
	GetProject(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Get all supervisors
	// (GET /api/project/{projectId}/supervisor)
	GetSupervisors(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Create a new supervisor
	// (POST /api/project/{projectId}/supervisor)
	CreateSupervisor(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Get all tasks for a project
	// (GET /api/project/{projectId}/tasks)
	GetProjectTasks(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Create a new task
	// (POST /api/project/{projectId}/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Get all tools for a project
	// (GET /api/project/{projectId}/tools)
	GetProjectTools(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Get a request group
	// (GET /api/request_group/{requestGroupId})
	GetRequestGroup(w http.ResponseWriter, r *http.Request, requestGroupId openapi_types.UUID)
	// Create a supervision request for a supervisor in a chain on a request group
	// (POST /api/request_group/{requestGroupId}/chain/{chainId}/supervisor/{supervisorId}/supervision_request)
	CreateSupervisionRequest(w http.ResponseWriter, r *http.Request, requestGroupId openapi_types.UUID, chainId openapi_types.UUID, supervisorId openapi_types.UUID)
	// Get a request group status
	// (GET /api/request_group/{requestGroupId}/status)
	GetRequestGroupStatus(w http.ResponseWriter, r *http.Request, requestGroupId openapi_types.UUID)
	// Create a new tool request for a request group
	// (POST /api/request_group/{requestGroupId}/tool_requests)
	CreateToolRequest(w http.ResponseWriter, r *http.Request, requestGroupId openapi_types.UUID)
	// Get all request groups for a run
	// (GET /api/run/{runId}/request_groups)
	GetRunRequestGroups(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Update a run with a result
	// (PUT /api/run/{runId}/result)
	UpdateRunResult(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get the state of a run
	// (GET /api/run/{runId}/state)
	GetRunState(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get the status of a run
	// (GET /api/run/{runId}/status)
	GetRunStatus(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Update the status of a run
	// (PUT /api/run/{runId}/status)
	UpdateRunStatus(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get all tools for a run
	// (GET /api/run/{runId}/tool)
	GetRunTools(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Create a new tool for a run
	// (POST /api/run/{runId}/tool)
	CreateRunTool(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get hub stats
	// (GET /api/stats)
	GetHubStats(w http.ResponseWriter, r *http.Request)
	// Get a supervision result
	// (GET /api/supervision_request/{supervisionRequestId}/result)
	GetSupervisionResult(w http.ResponseWriter, r *http.Request, supervisionRequestId openapi_types.UUID)
	// Create a supervision result for a supervision request
	// (POST /api/supervision_request/{supervisionRequestId}/result)
	CreateSupervisionResult(w http.ResponseWriter, r *http.Request, supervisionRequestId openapi_types.UUID)
	// Get the review payload for a supervision request
	// (GET /api/supervision_request/{supervisionRequestId}/review_payload)
	GetSupervisionReviewPayload(w http.ResponseWriter, r *http.Request, supervisionRequestId openapi_types.UUID)
	// Get a supervision request status
	// (GET /api/supervision_request/{supervisionRequestId}/status)
	GetSupervisionRequestStatus(w http.ResponseWriter, r *http.Request, supervisionRequestId openapi_types.UUID)
	// Get a supervisor
	// (GET /api/supervisor/{supervisorId})
	GetSupervisor(w http.ResponseWriter, r *http.Request, supervisorId openapi_types.UUID)
	// Get the Swagger UI
	// (GET /api/swagger-ui)
	GetSwaggerDocs(w http.ResponseWriter, r *http.Request)
	// Get a task
	// (GET /api/task/{taskId})
	GetTask(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID)
	// Get all runs for a task
	// (GET /api/task/{taskId}/run)
	GetTaskRuns(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID)
	// Create a new run for a task
	// (POST /api/task/{taskId}/run)
	CreateRun(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID)
	// Get a tool
	// (GET /api/tool/{toolId})
	GetTool(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
	// Create a new request group for a tool
	// (POST /api/tool/{toolId}/request_group)
	CreateToolRequestGroup(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
	// Get all supervisors for a tool, in chain format
	// (GET /api/tool/{toolId}/supervisors)
	GetToolSupervisorChains(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
	// Create new chains with supervisors for a tool
	// (POST /api/tool/{toolId}/supervisors)
	CreateToolSupervisorChains(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetOpenAPI operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPI(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPI(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProject(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProject(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisors operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisors(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSupervisor operation middleware
func (siw *ServerInterfaceWrapper) CreateSupervisor(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSupervisor(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProjectTasks operation middleware
func (siw *ServerInterfaceWrapper) GetProjectTasks(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectTasks(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProjectTools operation middleware
func (siw *ServerInterfaceWrapper) GetProjectTools(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectTools(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRequestGroup operation middleware
func (siw *ServerInterfaceWrapper) GetRequestGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestGroupId" -------------
	var requestGroupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "requestGroupId", r.PathValue("requestGroupId"), &requestGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestGroupId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRequestGroup(w, r, requestGroupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSupervisionRequest operation middleware
func (siw *ServerInterfaceWrapper) CreateSupervisionRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestGroupId" -------------
	var requestGroupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "requestGroupId", r.PathValue("requestGroupId"), &requestGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestGroupId", Err: err})
		return
	}

	// ------------- Path parameter "chainId" -------------
	var chainId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "chainId", r.PathValue("chainId"), &chainId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chainId", Err: err})
		return
	}

	// ------------- Path parameter "supervisorId" -------------
	var supervisorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisorId", r.PathValue("supervisorId"), &supervisorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisorId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSupervisionRequest(w, r, requestGroupId, chainId, supervisorId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRequestGroupStatus operation middleware
func (siw *ServerInterfaceWrapper) GetRequestGroupStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestGroupId" -------------
	var requestGroupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "requestGroupId", r.PathValue("requestGroupId"), &requestGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestGroupId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRequestGroupStatus(w, r, requestGroupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateToolRequest operation middleware
func (siw *ServerInterfaceWrapper) CreateToolRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestGroupId" -------------
	var requestGroupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "requestGroupId", r.PathValue("requestGroupId"), &requestGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestGroupId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateToolRequest(w, r, requestGroupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunRequestGroups operation middleware
func (siw *ServerInterfaceWrapper) GetRunRequestGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunRequestGroups(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateRunResult operation middleware
func (siw *ServerInterfaceWrapper) UpdateRunResult(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRunResult(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunState operation middleware
func (siw *ServerInterfaceWrapper) GetRunState(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunState(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunStatus operation middleware
func (siw *ServerInterfaceWrapper) GetRunStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunStatus(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateRunStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateRunStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRunStatus(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunTools operation middleware
func (siw *ServerInterfaceWrapper) GetRunTools(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunTools(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateRunTool operation middleware
func (siw *ServerInterfaceWrapper) CreateRunTool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRunTool(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHubStats operation middleware
func (siw *ServerInterfaceWrapper) GetHubStats(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHubStats(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisionResult operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisionResult(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisionRequestId" -------------
	var supervisionRequestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisionRequestId", r.PathValue("supervisionRequestId"), &supervisionRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisionRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisionResult(w, r, supervisionRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSupervisionResult operation middleware
func (siw *ServerInterfaceWrapper) CreateSupervisionResult(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisionRequestId" -------------
	var supervisionRequestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisionRequestId", r.PathValue("supervisionRequestId"), &supervisionRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisionRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSupervisionResult(w, r, supervisionRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisionReviewPayload operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisionReviewPayload(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisionRequestId" -------------
	var supervisionRequestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisionRequestId", r.PathValue("supervisionRequestId"), &supervisionRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisionRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisionReviewPayload(w, r, supervisionRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisionRequestStatus operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisionRequestStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisionRequestId" -------------
	var supervisionRequestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisionRequestId", r.PathValue("supervisionRequestId"), &supervisionRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisionRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisionRequestStatus(w, r, supervisionRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisor operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisor(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisorId" -------------
	var supervisorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisorId", r.PathValue("supervisorId"), &supervisorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisorId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisor(w, r, supervisorId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSwaggerDocs operation middleware
func (siw *ServerInterfaceWrapper) GetSwaggerDocs(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSwaggerDocs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", r.PathValue("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTask(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTaskRuns operation middleware
func (siw *ServerInterfaceWrapper) GetTaskRuns(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", r.PathValue("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskRuns(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateRun operation middleware
func (siw *ServerInterfaceWrapper) CreateRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", r.PathValue("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRun(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTool operation middleware
func (siw *ServerInterfaceWrapper) GetTool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTool(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateToolRequestGroup operation middleware
func (siw *ServerInterfaceWrapper) CreateToolRequestGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateToolRequestGroup(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetToolSupervisorChains operation middleware
func (siw *ServerInterfaceWrapper) GetToolSupervisorChains(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetToolSupervisorChains(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateToolSupervisorChains operation middleware
func (siw *ServerInterfaceWrapper) CreateToolSupervisorChains(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateToolSupervisorChains(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/openapi.yaml", wrapper.GetOpenAPI)
	m.HandleFunc("GET "+options.BaseURL+"/api/project", wrapper.GetProjects)
	m.HandleFunc("POST "+options.BaseURL+"/api/project", wrapper.CreateProject)
	m.HandleFunc("GET "+options.BaseURL+"/api/project/{projectId}", wrapper.GetProject)
	m.HandleFunc("GET "+options.BaseURL+"/api/project/{projectId}/supervisor", wrapper.GetSupervisors)
	m.HandleFunc("POST "+options.BaseURL+"/api/project/{projectId}/supervisor", wrapper.CreateSupervisor)
	m.HandleFunc("GET "+options.BaseURL+"/api/project/{projectId}/tasks", wrapper.GetProjectTasks)
	m.HandleFunc("POST "+options.BaseURL+"/api/project/{projectId}/tasks", wrapper.CreateTask)
	m.HandleFunc("GET "+options.BaseURL+"/api/project/{projectId}/tools", wrapper.GetProjectTools)
	m.HandleFunc("GET "+options.BaseURL+"/api/request_group/{requestGroupId}", wrapper.GetRequestGroup)
	m.HandleFunc("POST "+options.BaseURL+"/api/request_group/{requestGroupId}/chain/{chainId}/supervisor/{supervisorId}/supervision_request", wrapper.CreateSupervisionRequest)
	m.HandleFunc("GET "+options.BaseURL+"/api/request_group/{requestGroupId}/status", wrapper.GetRequestGroupStatus)
	m.HandleFunc("POST "+options.BaseURL+"/api/request_group/{requestGroupId}/tool_requests", wrapper.CreateToolRequest)
	m.HandleFunc("GET "+options.BaseURL+"/api/run/{runId}/request_groups", wrapper.GetRunRequestGroups)
	m.HandleFunc("PUT "+options.BaseURL+"/api/run/{runId}/result", wrapper.UpdateRunResult)
	m.HandleFunc("GET "+options.BaseURL+"/api/run/{runId}/state", wrapper.GetRunState)
	m.HandleFunc("GET "+options.BaseURL+"/api/run/{runId}/status", wrapper.GetRunStatus)
	m.HandleFunc("PUT "+options.BaseURL+"/api/run/{runId}/status", wrapper.UpdateRunStatus)
	m.HandleFunc("GET "+options.BaseURL+"/api/run/{runId}/tool", wrapper.GetRunTools)
	m.HandleFunc("POST "+options.BaseURL+"/api/run/{runId}/tool", wrapper.CreateRunTool)
	m.HandleFunc("GET "+options.BaseURL+"/api/stats", wrapper.GetHubStats)
	m.HandleFunc("GET "+options.BaseURL+"/api/supervision_request/{supervisionRequestId}/result", wrapper.GetSupervisionResult)
	m.HandleFunc("POST "+options.BaseURL+"/api/supervision_request/{supervisionRequestId}/result", wrapper.CreateSupervisionResult)
	m.HandleFunc("GET "+options.BaseURL+"/api/supervision_request/{supervisionRequestId}/review_payload", wrapper.GetSupervisionReviewPayload)
	m.HandleFunc("GET "+options.BaseURL+"/api/supervision_request/{supervisionRequestId}/status", wrapper.GetSupervisionRequestStatus)
	m.HandleFunc("GET "+options.BaseURL+"/api/supervisor/{supervisorId}", wrapper.GetSupervisor)
	m.HandleFunc("GET "+options.BaseURL+"/api/swagger-ui", wrapper.GetSwaggerDocs)
	m.HandleFunc("GET "+options.BaseURL+"/api/task/{taskId}", wrapper.GetTask)
	m.HandleFunc("GET "+options.BaseURL+"/api/task/{taskId}/run", wrapper.GetTaskRuns)
	m.HandleFunc("POST "+options.BaseURL+"/api/task/{taskId}/run", wrapper.CreateRun)
	m.HandleFunc("GET "+options.BaseURL+"/api/tool/{toolId}", wrapper.GetTool)
	m.HandleFunc("POST "+options.BaseURL+"/api/tool/{toolId}/request_group", wrapper.CreateToolRequestGroup)
	m.HandleFunc("GET "+options.BaseURL+"/api/tool/{toolId}/supervisors", wrapper.GetToolSupervisorChains)
	m.HandleFunc("POST "+options.BaseURL+"/api/tool/{toolId}/supervisors", wrapper.CreateToolSupervisorChains)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RcW3PbtvL/Khj8/4+s5fb0yW+p00k8c3qSsZOnMxkNLMISGgpgcXHq8fi7n8GFJECA",
	"JChLtPqSyBIuu7+9YHex5DPcsH3NKKZSwKtnKDY7vEfm4zu+Vfvme1SWRBJGUfWZsxpzSbCAV5IrXED5",
	"VGN4Bdn9n3gj4UsBr3eI0N//xhulp+jptTfpGW7072tS6s8PjO+RhFdQKVLCdjEhOaFbvdiGYyRxudaD",
	"vOElkvgnSfY4NSdzaY7/UljI9ZYzVefR42YRjkt49V9ohkTLFB2HAf3fJrG6k0jiAcD0h//n+AFewf9b",
	"dVJbOZGt7lSN+SMRjJs1DXaGDOxLYmyFntxeCijcmoTRtWPTEEQk3otcggijt3auZe+lhQFxjp4iUC23",
	"A5vHTA2i6jaN4RQtUmtSmm9KLDac1BYk+E6TBdgD6AaCm/cCSAasNIGhQYAfRO5g0aExqXER3wnKGdkk",
	"VGCPhUBbPIX5H26Ylp1k9ZpjJKzgxxW5WT4F5nu8MULQq2Cq9no8qmvOHrHRfjOugBLzPaFawAXcs5I8",
	"PMECYrFBlf7uWwKN3zln/BaLmlGRYLnEEpFKJIgvINZTp9myw1JMfVT3WhtFvC0SgmwpLtccPxL8Y8T9",
	"tbsTKvEWc5gSaH+59YYpKtOT75V4Wm8q0njdeIQWeYVl3nIbRine6MGjaz5wjMdH1JiWhG5z9rRD1iXR",
	"Erlv3c7BAPZ9Q8RSAf9SWHniMprPgy8CDnswxxKCaS6GwR8CaFD4KYX8ozPwnvNnVOIA7vkHHatyPcet",
	"Hqq9B1Pc+qHYiTFWrTeoqvKPgi+MVdeoqmIf2PydRdwXPTShEgYfx+YItrcOhsaJiSch8R4WUAnMnbSE",
	"RIGAOrZ9GrxFJP7bSFqVhCXnfVKyVjJ1qGtPn4+hOxkSCO5ZiaukqFTOmfHVnhgp5/WZM/MxJv50URlF",
	"+7TecaXjAKEquZZoGwI3fdL6KmO2CEKzwoVyvS1SynRrTPkzeqoYKuPg4ZpRaYIDVFVA7jAg1LJMGAUU",
	"4xKX4IFxgMBO7REF1jNgrqOLPfqOAQJe4APK5vAtkkG0aALG/LiuDcKCuDXHgl1A9cGMdwIhCQi+7DC4",
	"ea8DKM0/VxTIHRGOU0CE5l975SlNSASA82POSPipVYsAzj40LadJdVB0UfOw6pnUeU29mg7L7ShtI0h8",
	"PzztaWZPpji3ajIZnOMFk7rcd4mv1u15WPbw6auP47FddQClNvvLQiKANQHBXctBc1S5KMWPZLQZIlKZ",
	"D02womVL9pip9DmYMLG0UNsULTfVzxxWM0HssnTdZsZxIJkpwY6bzjCCBHG+eYTTUwSnFGAoXY7A7TxA",
	"tic0E46DyRLOeMRMYrZSgZXAdK3D1MYQT1hrKr3seAyMNoue4+p18q7/SHr7GLpXaWtvnV545MUhHVkT",
	"Auo80LFOx4OtfEyNDz8C3eaTJ2BXmkuUG6RNMYN8uJu6YWU6Gj5MV70w7fn4EXpOKtdhkczmXGjuU9rT",
	"RLOJA6bw4RtH/ro5KV5Ri+4c+/wqKON5hU9re/5O43w1+WgcgutJYRXzAlybqkc3G+wxogLIHZImWPdT",
	"DyJAySgGtlICBCkxQLS04zB/xFwP2WOOqyeX5eDyAnySO8z90qmmQwDEMdghWla4dLP1ggXAF9sL8FGn",
	"QmmqmjzpB6mqJoUwaYU1XvBIkPn7DlNJKK7A15sLWLQxjyV+3ZEDC2gWDL+izP87FfZ8QeL7cVzZqa2w",
	"tkn74W7NW6BI5MopfdToDF1etLFmR+w9YxVG5ix0led8g/JK3FEhBEtUIolm31ixtkYztrOr5Ly4CuPs",
	"XWzhrC3wTxbMuoIPYzOLbZO+poW9Wb0Fwc8OkqLWyx/tGDuSMZAtNTXfkIzc8tBE0ekQQ3LzivSB5pHp",
	"sBlC2lRNY7QPvpt9UHQzAXbsUBAXeD105dId+xmupd2+8HhwKwxCMHAlFoAwZhDdTfaBAJyYwcE0+jAO",
	"M01m/o2iO3JnXJe7KlFWlbI7QhpXeYjdNRND+BteA3omxPGhKR0tVtoztM++Zvc1aMrrhzukAPiavoQi",
	"tFZyLdl3TAfu7ezpMTpEMomqkRF9e/L37G/QWy1mRa+mg1KzEZGV/q2NEd99voEFNDGoCZd/vri8uDRc",
	"1JiimsAr+K+Ly4ufdTCE5M5Qu0I1WbnfL57Q3rjlLTZqoKEyFf6bEl7BD1h+qjG1m3B3v23W+OXyMo7V",
	"3VhgBWpgEGq/R/zJrmXC294grchboVHSu3zTcwx9dXdhM0Sau9MRA7R5142oriuyMZNXf7o2Ard/rnI2",
	"F0ixYvbPfvhvIqROV+qGvhgIVFXdzx0EzSbfbHEwwfa1MdpmXOvJfmPl0yyeQ6NY7qZq+l4qnKgP/5dX",
	"ynfK70YCdPCCB6ZoqTn75fLnZXZ0Plnv+etMLseUN+xPSez/GyqbPLSnrVbhAAIU/2hUNqmxPcNdPbsP",
	"N+VLhhG/1oazTHcQd4v3r8vh3cibslbLYh8xCrcJZtEeS8z1L/pgg1fGxzeh+hVsJQD7JlXMUNZvI5Jd",
	"iaAgOCTkO68ItISzHi1VDfprv1SVdtki4KMRirfbonIZPyPu/KrQocdELsg5TvvELtQrup25Fw3qdUkl",
	"GrM4HfeLDI/6xYxbwtpMQXGGnVkOztLlVpWlzjW2xA7Y8HpGVm7oOVYYOFXCGggTU5HeYXHdiV2EBqtz",
	"DsMGKi2oPZmPGmVT15wySlehXMAo07XTYaM0lA2YhP5t2CT0Tm8SkATdKatn7pU7JqLOoDJywtAzbsiJ",
	"JeB+B1s3II4DeTCiQz5YOU8CIUZLiGFlLgNXz+a/MGRcPXef/V96nRmLclUkN3DEn2BlH4ElwkGvheW0",
	"YWHQK3M+4SFhtLWns4gTFw6D/jMQ/rQHoEgAZV2/dxNOKED22SHA6IiH8lD3TtAJh9F1wuS477umdeVk",
	"TrztjXyt6wZtm80/y4NH5fxlqZyIgL1bg9N4tOBe4hzCWMaqVrFQWeISSNYzwbHo1p9uLTszwGjVRdHV",
	"M1fmNA9UZ9xoFfXXWy4M7ndE54bEASpDsXE4qMFT0VcauaJHs+1AWG2j6RIkFND1ooS68LUukcRGHQw5",
	"x0pfBx8oeDk8Ge35e6XPRL3LGdaYLKxW+8wDvcawHcKtLio6YMjt1faI/d61T5Wc6Kht90gdtooC4X5M",
	"XSya37TdRvZneH5Ds8sIaBR90zjGQauWL8vprcdKco1klXhz0U65M0+CJ0irPOFNea5f057LwagMvWXa",
	"e+TAnVJx6XrpRhT8n1/7CsGYUfc6jvKNBMEO3qMdpSdrgjxNd2NO631Op+IZ9B6Y4H65xgOzXU5J3JI1",
	"aAWNTxDNqyiGHEH7uooTHnTtHgmGP6p7YIlcOnK7oY+oIkPRm/Y3u5Y2r4Ji/vYAjmukXRm1q7mF0f7U",
	"vXz3DNopw4/4Ob4YpPbID6pQJuIOi1BeeSpZeIkXGCxL5XjwFMKLlWtfmSUdIJSzKtaG+VZO1XJCX6bq",
	"k7NszLxfpe5eopBla/6LF06ZTgUbJQuY5jEkR76BLLa+tylUpwr2U4kCj9mZpwFv4woO0LvplDL9FPaJ",
	"M8z4eetcF28FLLrXEIw79GD4eUszuufM65RbQk5N69ZQJ9WoIIbbl+bg/vp7zxbvH2i7xfwnRUYBtqPe",
	"s43I6ml348HXmwGf4w0Y6mWXSHxfPet/J6TfdvOcqh3BdGqlG2OSsk53wuTI13J7HMkG+K24fU/NGIa3",
	"ii5TabhVdNaNgqZr4B5B0abM0AM9v8Z1DMwn6wxw6WDwVtGcDJUrOoZfq0uMVatn/e+ULTb1lBO2Bg1l",
	"5IsHW6YMMN6MLi0eB1S/LNhHcgW++FbRy5GWISb7QrrrLzvprbTXWnbcxO2orW3n3pYdtmo4VxIq/cB9",
	"eKiUvXdrjPmX3ks9ln44on29cu755b0tWMc+hM97ZsIDtQCEugYiZ26viCWXsemksA6z6/wXxA0/D3t0",
	"Yz/45c+Rulh8xg9tbXG+OqXVZPABiZeX/wUAAP//VyCWuvFdAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
