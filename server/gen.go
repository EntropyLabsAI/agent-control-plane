//go:build go1.22

// Package sentinel provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sentinel

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Decision.
const (
	Approve   Decision = "approve"
	Escalate  Decision = "escalate"
	Modify    Decision = "modify"
	Reject    Decision = "reject"
	Terminate Decision = "terminate"
)

// Defines values for MessageRole.
const (
	Assistant MessageRole = "assistant"
	System    MessageRole = "system"
	User      MessageRole = "user"
)

// Defines values for Status.
const (
	Assigned  Status = "assigned"
	Completed Status = "completed"
	Failed    Status = "failed"
	Pending   Status = "pending"
	Timeout   Status = "timeout"
)

// Defines values for SupervisorType.
const (
	ClientSupervisor SupervisorType = "client_supervisor"
	HumanSupervisor  SupervisorType = "human_supervisor"
	NoSupervisor     SupervisorType = "no_supervisor"
)

// Arguments defines model for Arguments.
type Arguments map[string]interface{}

// AssistantMessage defines model for AssistantMessage.
type AssistantMessage struct {
	Content   string      `json:"content"`
	Role      string      `json:"role"`
	Source    *string     `json:"source,omitempty"`
	ToolCalls *[]ToolCall `json:"tool_calls,omitempty"`
}

// ChainRequest defines model for ChainRequest.
type ChainRequest struct {
	// SupervisorIds Array of supervisor IDs to create chains with
	SupervisorIds *[]openapi_types.UUID `json:"supervisor_ids,omitempty"`
}

// Choice defines model for Choice.
type Choice struct {
	Message    AssistantMessage `json:"message"`
	StopReason *string          `json:"stop_reason,omitempty"`
}

// Decision defines model for Decision.
type Decision string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Details *string `json:"details,omitempty"`
	Error   string  `json:"error"`
}

// HubStats defines model for HubStats.
type HubStats struct {
	AssignedReviews       map[string]int `json:"assigned_reviews"`
	AssignedReviewsCount  int            `json:"assigned_reviews_count"`
	BusyClients           int            `json:"busy_clients"`
	CompletedReviewsCount int            `json:"completed_reviews_count"`
	ConnectedClients      int            `json:"connected_clients"`
	FreeClients           int            `json:"free_clients"`
	PendingReviewsCount   int            `json:"pending_reviews_count"`
	ReviewDistribution    map[string]int `json:"review_distribution"`
}

// Message defines model for Message.
type Message struct {
	Content string      `json:"content"`
	Role    MessageRole `json:"role"`
}

// MessageRole defines model for MessageRole.
type MessageRole string

// Output defines model for Output.
type Output struct {
	Choices *[]Choice `json:"choices,omitempty"`
	Model   *string   `json:"model,omitempty"`
	Usage   *Usage    `json:"usage,omitempty"`
}

// Project defines model for Project.
type Project struct {
	CreatedAt time.Time          `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
}

// Run defines model for Run.
type Run struct {
	CreatedAt time.Time          `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ProjectId openapi_types.UUID `json:"project_id"`
}

// StateMessage defines model for StateMessage.
type StateMessage struct {
	Content    string      `json:"content"`
	Function   *string     `json:"function,omitempty"`
	Role       string      `json:"role"`
	Source     *string     `json:"source,omitempty"`
	ToolCallId *string     `json:"tool_call_id,omitempty"`
	ToolCalls  *[]ToolCall `json:"tool_calls,omitempty"`
}

// Status defines model for Status.
type Status string

// SupervisionRequest defines model for SupervisionRequest.
type SupervisionRequest struct {
	ChainexecutionId openapi_types.UUID  `json:"chainexecution_id"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	PositionInChain  int                 `json:"position_in_chain"`
	Status           *SupervisionStatus  `json:"status,omitempty"`
	SupervisorId     openapi_types.UUID  `json:"supervisor_id"`
}

// SupervisionResult defines model for SupervisionResult.
type SupervisionResult struct {
	CreatedAt            time.Time           `json:"created_at"`
	Decision             Decision            `json:"decision"`
	Id                   *openapi_types.UUID `json:"id,omitempty"`
	Reasoning            string              `json:"reasoning"`
	SupervisionRequestId openapi_types.UUID  `json:"supervision_request_id"`
}

// SupervisionStatus defines model for SupervisionStatus.
type SupervisionStatus struct {
	CreatedAt            time.Time           `json:"created_at"`
	Id                   int                 `json:"id"`
	Status               Status              `json:"status"`
	SupervisionRequestId *openapi_types.UUID `json:"supervision_request_id,omitempty"`
}

// Supervisor defines model for Supervisor.
type Supervisor struct {
	Attributes  map[string]interface{} `json:"attributes"`
	Code        string                 `json:"code"`
	CreatedAt   time.Time              `json:"created_at"`
	Description string                 `json:"description"`
	Id          *openapi_types.UUID    `json:"id,omitempty"`
	Name        string                 `json:"name"`

	// Type The type of supervisor. ClientSupervisor means that the supervision is done client side and the server is merely informed. Other supervisor types are handled serverside, e.g. HumanSupervisor means that a human will review the request via the Sentinel UI.
	Type SupervisorType `json:"type"`
}

// SupervisorChain defines model for SupervisorChain.
type SupervisorChain struct {
	ChainId     openapi_types.UUID `json:"chain_id"`
	Supervisors []Supervisor       `json:"supervisors"`
}

// SupervisorType The type of supervisor. ClientSupervisor means that the supervision is done client side and the server is merely informed. Other supervisor types are handled serverside, e.g. HumanSupervisor means that a human will review the request via the Sentinel UI.
type SupervisorType string

// TaskState defines model for TaskState.
type TaskState struct {
	Completed  bool                    `json:"completed"`
	Messages   []StateMessage          `json:"messages"`
	Metadata   *map[string]interface{} `json:"metadata,omitempty"`
	Output     Output                  `json:"output"`
	Store      *map[string]interface{} `json:"store,omitempty"`
	ToolChoice *ToolChoice             `json:"tool_choice,omitempty"`
	Tools      []Tool                  `json:"tools"`
}

// Tool defines model for Tool.
type Tool struct {
	Attributes        *map[string]interface{} `json:"attributes,omitempty"`
	Description       *string                 `json:"description,omitempty"`
	Id                *openapi_types.UUID     `json:"id,omitempty"`
	IgnoredAttributes *[]string               `json:"ignored_attributes,omitempty"`
	Name              *string                 `json:"name,omitempty"`
	RunId             *openapi_types.UUID     `json:"run_id,omitempty"`
}

// ToolCall defines model for ToolCall.
type ToolCall struct {
	Arguments  map[string]interface{} `json:"arguments"`
	Function   string                 `json:"function"`
	Id         string                 `json:"id"`
	ParseError *string                `json:"parse_error,omitempty"`
	Type       string                 `json:"type"`
}

// ToolChoice defines model for ToolChoice.
type ToolChoice struct {
	Arguments Arguments `json:"arguments"`
	Function  string    `json:"function"`
	Id        string    `json:"id"`
	Type      string    `json:"type"`
}

// ToolRequest defines model for ToolRequest.
type ToolRequest struct {
	Arguments      Arguments           `json:"arguments"`
	Id             *openapi_types.UUID `json:"id,omitempty"`
	Message        Message             `json:"message"`
	RequestgroupId *openapi_types.UUID `json:"requestgroup_id,omitempty"`
	TaskState      TaskState           `json:"task_state"`
	ToolId         openapi_types.UUID  `json:"tool_id"`
}

// ToolRequestGroup defines model for ToolRequestGroup.
type ToolRequestGroup struct {
	CreatedAt    *time.Time          `json:"created_at,omitempty"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	ToolRequests []ToolRequest       `json:"tool_requests"`
}

// Usage defines model for Usage.
type Usage struct {
	InputTokens  int `json:"input_tokens"`
	OutputTokens int `json:"output_tokens"`
	TotalTokens  int `json:"total_tokens"`
}

// CreateProjectJSONBody defines parameters for CreateProject.
type CreateProjectJSONBody struct {
	Name string `json:"name"`
}

// CreateRunToolJSONBody defines parameters for CreateRunTool.
type CreateRunToolJSONBody struct {
	Attributes        *map[string]interface{} `json:"attributes,omitempty"`
	Description       *string                 `json:"description,omitempty"`
	IgnoredAttributes *[]string               `json:"ignored_attributes,omitempty"`
	Name              string                  `json:"name"`
}

// CreateToolSupervisorChainsJSONBody defines parameters for CreateToolSupervisorChains.
type CreateToolSupervisorChainsJSONBody = []ChainRequest

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody CreateProjectJSONBody

// CreateSupervisorJSONRequestBody defines body for CreateSupervisor for application/json ContentType.
type CreateSupervisorJSONRequestBody = Supervisor

// CreateSupervisionRequestJSONRequestBody defines body for CreateSupervisionRequest for application/json ContentType.
type CreateSupervisionRequestJSONRequestBody = SupervisionRequest

// CreateRunToolJSONRequestBody defines body for CreateRunTool for application/json ContentType.
type CreateRunToolJSONRequestBody CreateRunToolJSONBody

// CreateSupervisionResultJSONRequestBody defines body for CreateSupervisionResult for application/json ContentType.
type CreateSupervisionResultJSONRequestBody = SupervisionResult

// CreateToolRequestGroupJSONRequestBody defines body for CreateToolRequestGroup for application/json ContentType.
type CreateToolRequestGroupJSONRequestBody = ToolRequestGroup

// CreateToolSupervisorChainsJSONRequestBody defines body for CreateToolSupervisorChains for application/json ContentType.
type CreateToolSupervisorChainsJSONRequestBody = CreateToolSupervisorChainsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the OpenAPI schema
	// (GET /api/openapi.yaml)
	GetOpenAPI(w http.ResponseWriter, r *http.Request)
	// Get all projects
	// (GET /api/project)
	GetProjects(w http.ResponseWriter, r *http.Request)
	// Create a new project
	// (POST /api/project)
	CreateProject(w http.ResponseWriter, r *http.Request)
	// Get a project
	// (GET /api/project/{projectId})
	GetProject(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Get all runs for a project
	// (GET /api/project/{projectId}/run)
	GetProjectRuns(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Create a new run for a project
	// (POST /api/project/{projectId}/run)
	CreateProjectRun(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Get all supervisors
	// (GET /api/project/{projectId}/supervisor)
	GetSupervisors(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Create a new supervisor
	// (POST /api/project/{projectId}/supervisor)
	CreateSupervisor(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Get all tools for a project
	// (GET /api/project/{projectId}/tools)
	GetProjectTools(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Get a request group
	// (GET /api/request_group/{requestGroupId})
	GetRequestGroup(w http.ResponseWriter, r *http.Request, requestGroupId openapi_types.UUID)
	// Create a supervision request for a supervisor in a chain on a request group
	// (POST /api/request_group/{requestGroupId}/chain/{chainId}/supervisor/{supervisorId}/supervision_request)
	CreateSupervisionRequest(w http.ResponseWriter, r *http.Request, requestGroupId openapi_types.UUID, chainId openapi_types.UUID, supervisorId openapi_types.UUID)
	// Get all request groups for a run
	// (GET /api/run/{runId}/request_groups)
	GetRunRequestGroups(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get all tools for a run
	// (GET /api/run/{runId}/tool)
	GetRunTools(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Create a new tool for a run
	// (POST /api/run/{runId}/tool)
	CreateRunTool(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get hub stats
	// (GET /api/stats)
	GetHubStats(w http.ResponseWriter, r *http.Request)
	// Get a supervision result
	// (GET /api/supervision_request/{supervisionRequestId}/result)
	GetSupervisionResult(w http.ResponseWriter, r *http.Request, supervisionRequestId openapi_types.UUID)
	// Create a supervision result for a supervision request
	// (POST /api/supervision_request/{supervisionRequestId}/result)
	CreateSupervisionResult(w http.ResponseWriter, r *http.Request, supervisionRequestId openapi_types.UUID)
	// Get a supervision request status
	// (GET /api/supervision_request/{supervisionRequestId}/status)
	GetSupervisionRequestStatus(w http.ResponseWriter, r *http.Request, supervisionRequestId openapi_types.UUID)
	// Get a supervisor
	// (GET /api/supervisor/{supervisorId})
	GetSupervisor(w http.ResponseWriter, r *http.Request, supervisorId openapi_types.UUID)
	// Get the Swagger UI
	// (GET /api/swagger-ui)
	GetSwaggerDocs(w http.ResponseWriter, r *http.Request)
	// Get a tool
	// (GET /api/tool/{toolId})
	GetTool(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
	// Create a new request group for a tool
	// (POST /api/tool/{toolId}/request_group)
	CreateToolRequestGroup(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
	// Get all supervisors for a tool, in chain format
	// (GET /api/tool/{toolId}/supervisors)
	GetToolSupervisorChains(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
	// Create new chains with supervisors for a tool
	// (POST /api/tool/{toolId}/supervisors)
	CreateToolSupervisorChains(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetOpenAPI operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPI(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPI(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProject(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProject(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProjectRuns operation middleware
func (siw *ServerInterfaceWrapper) GetProjectRuns(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectRuns(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectRun operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectRun(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisors operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisors(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSupervisor operation middleware
func (siw *ServerInterfaceWrapper) CreateSupervisor(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSupervisor(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProjectTools operation middleware
func (siw *ServerInterfaceWrapper) GetProjectTools(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectTools(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRequestGroup operation middleware
func (siw *ServerInterfaceWrapper) GetRequestGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestGroupId" -------------
	var requestGroupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "requestGroupId", r.PathValue("requestGroupId"), &requestGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestGroupId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRequestGroup(w, r, requestGroupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSupervisionRequest operation middleware
func (siw *ServerInterfaceWrapper) CreateSupervisionRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestGroupId" -------------
	var requestGroupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "requestGroupId", r.PathValue("requestGroupId"), &requestGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestGroupId", Err: err})
		return
	}

	// ------------- Path parameter "chainId" -------------
	var chainId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "chainId", r.PathValue("chainId"), &chainId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chainId", Err: err})
		return
	}

	// ------------- Path parameter "supervisorId" -------------
	var supervisorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisorId", r.PathValue("supervisorId"), &supervisorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisorId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSupervisionRequest(w, r, requestGroupId, chainId, supervisorId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunRequestGroups operation middleware
func (siw *ServerInterfaceWrapper) GetRunRequestGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunRequestGroups(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunTools operation middleware
func (siw *ServerInterfaceWrapper) GetRunTools(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunTools(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateRunTool operation middleware
func (siw *ServerInterfaceWrapper) CreateRunTool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRunTool(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHubStats operation middleware
func (siw *ServerInterfaceWrapper) GetHubStats(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHubStats(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisionResult operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisionResult(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisionRequestId" -------------
	var supervisionRequestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisionRequestId", r.PathValue("supervisionRequestId"), &supervisionRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisionRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisionResult(w, r, supervisionRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSupervisionResult operation middleware
func (siw *ServerInterfaceWrapper) CreateSupervisionResult(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisionRequestId" -------------
	var supervisionRequestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisionRequestId", r.PathValue("supervisionRequestId"), &supervisionRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisionRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSupervisionResult(w, r, supervisionRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisionRequestStatus operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisionRequestStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisionRequestId" -------------
	var supervisionRequestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisionRequestId", r.PathValue("supervisionRequestId"), &supervisionRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisionRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisionRequestStatus(w, r, supervisionRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisor operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisor(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisorId" -------------
	var supervisorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisorId", r.PathValue("supervisorId"), &supervisorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisorId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisor(w, r, supervisorId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSwaggerDocs operation middleware
func (siw *ServerInterfaceWrapper) GetSwaggerDocs(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSwaggerDocs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTool operation middleware
func (siw *ServerInterfaceWrapper) GetTool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTool(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateToolRequestGroup operation middleware
func (siw *ServerInterfaceWrapper) CreateToolRequestGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateToolRequestGroup(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetToolSupervisorChains operation middleware
func (siw *ServerInterfaceWrapper) GetToolSupervisorChains(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetToolSupervisorChains(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateToolSupervisorChains operation middleware
func (siw *ServerInterfaceWrapper) CreateToolSupervisorChains(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateToolSupervisorChains(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/openapi.yaml", wrapper.GetOpenAPI)
	m.HandleFunc("GET "+options.BaseURL+"/api/project", wrapper.GetProjects)
	m.HandleFunc("POST "+options.BaseURL+"/api/project", wrapper.CreateProject)
	m.HandleFunc("GET "+options.BaseURL+"/api/project/{projectId}", wrapper.GetProject)
	m.HandleFunc("GET "+options.BaseURL+"/api/project/{projectId}/run", wrapper.GetProjectRuns)
	m.HandleFunc("POST "+options.BaseURL+"/api/project/{projectId}/run", wrapper.CreateProjectRun)
	m.HandleFunc("GET "+options.BaseURL+"/api/project/{projectId}/supervisor", wrapper.GetSupervisors)
	m.HandleFunc("POST "+options.BaseURL+"/api/project/{projectId}/supervisor", wrapper.CreateSupervisor)
	m.HandleFunc("GET "+options.BaseURL+"/api/project/{projectId}/tools", wrapper.GetProjectTools)
	m.HandleFunc("GET "+options.BaseURL+"/api/request_group/{requestGroupId}", wrapper.GetRequestGroup)
	m.HandleFunc("POST "+options.BaseURL+"/api/request_group/{requestGroupId}/chain/{chainId}/supervisor/{supervisorId}/supervision_request", wrapper.CreateSupervisionRequest)
	m.HandleFunc("GET "+options.BaseURL+"/api/run/{runId}/request_groups", wrapper.GetRunRequestGroups)
	m.HandleFunc("GET "+options.BaseURL+"/api/run/{runId}/tool", wrapper.GetRunTools)
	m.HandleFunc("POST "+options.BaseURL+"/api/run/{runId}/tool", wrapper.CreateRunTool)
	m.HandleFunc("GET "+options.BaseURL+"/api/stats", wrapper.GetHubStats)
	m.HandleFunc("GET "+options.BaseURL+"/api/supervision_request/{supervisionRequestId}/result", wrapper.GetSupervisionResult)
	m.HandleFunc("POST "+options.BaseURL+"/api/supervision_request/{supervisionRequestId}/result", wrapper.CreateSupervisionResult)
	m.HandleFunc("GET "+options.BaseURL+"/api/supervision_request/{supervisionRequestId}/status", wrapper.GetSupervisionRequestStatus)
	m.HandleFunc("GET "+options.BaseURL+"/api/supervisor/{supervisorId}", wrapper.GetSupervisor)
	m.HandleFunc("GET "+options.BaseURL+"/api/swagger-ui", wrapper.GetSwaggerDocs)
	m.HandleFunc("GET "+options.BaseURL+"/api/tool/{toolId}", wrapper.GetTool)
	m.HandleFunc("POST "+options.BaseURL+"/api/tool/{toolId}/request_group", wrapper.CreateToolRequestGroup)
	m.HandleFunc("GET "+options.BaseURL+"/api/tool/{toolId}/supervisors", wrapper.GetToolSupervisorChains)
	m.HandleFunc("POST "+options.BaseURL+"/api/tool/{toolId}/supervisors", wrapper.CreateToolSupervisorChains)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
