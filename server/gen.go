//go:build go1.22

// Package sentinel provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sentinel

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Decision.
const (
	Approve   Decision = "approve"
	Escalate  Decision = "escalate"
	Modify    Decision = "modify"
	Reject    Decision = "reject"
	Terminate Decision = "terminate"
)

// Defines values for LLMMessageRole.
const (
	Assistant LLMMessageRole = "assistant"
	System    LLMMessageRole = "system"
	User      LLMMessageRole = "user"
)

// Defines values for Status.
const (
	Assigned  Status = "assigned"
	Completed Status = "completed"
	Failed    Status = "failed"
	Pending   Status = "pending"
	Timeout   Status = "timeout"
)

// Defines values for SupervisorType.
const (
	ClientSupervisor SupervisorType = "client_supervisor"
	HumanSupervisor  SupervisorType = "human_supervisor"
)

// Arguments defines model for Arguments.
type Arguments struct {
	Cmd  *string `json:"cmd,omitempty"`
	Code *string `json:"code,omitempty"`
}

// AssistantMessage defines model for AssistantMessage.
type AssistantMessage struct {
	Content   string      `json:"content"`
	Role      string      `json:"role"`
	Source    *string     `json:"source,omitempty"`
	ToolCalls *[]ToolCall `json:"tool_calls,omitempty"`
}

// Choice defines model for Choice.
type Choice struct {
	Message    AssistantMessage `json:"message"`
	StopReason *string          `json:"stop_reason,omitempty"`
}

// CreateSupervisionResult defines model for CreateSupervisionResult.
type CreateSupervisionResult struct {
	ExecutionId       openapi_types.UUID `json:"execution_id"`
	RunId             openapi_types.UUID `json:"run_id"`
	SupervisionResult SupervisionResult  `json:"supervision_result"`
	SupervisorId      openapi_types.UUID `json:"supervisor_id"`
	ToolId            openapi_types.UUID `json:"tool_id"`

	// ToolRequest A tool request is a request to use a tool. It must be approved by a supervisor.
	ToolRequest ToolRequest `json:"tool_request"`
}

// Decision defines model for Decision.
type Decision string

// Execution defines model for Execution.
type Execution struct {
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        openapi_types.UUID  `json:"id"`
	RunId     *openapi_types.UUID `json:"run_id,omitempty"`
	Status    *Status             `json:"status,omitempty"`
	ToolId    *openapi_types.UUID `json:"tool_id,omitempty"`
}

// ExecutionSupervisions defines model for ExecutionSupervisions.
type ExecutionSupervisions struct {
	ExecutionId openapi_types.UUID   `json:"execution_id"`
	Requests    []SupervisionRequest `json:"requests"`
	Results     []SupervisionResult  `json:"results"`
	Statuses    []SupervisionStatus  `json:"statuses"`
}

// HubStats defines model for HubStats.
type HubStats struct {
	AssignedReviews       map[string]int `json:"assigned_reviews"`
	AssignedReviewsCount  int            `json:"assigned_reviews_count"`
	BusyClients           int            `json:"busy_clients"`
	CompletedReviewsCount int            `json:"completed_reviews_count"`
	ConnectedClients      int            `json:"connected_clients"`
	FreeClients           int            `json:"free_clients"`
	PendingReviewsCount   int            `json:"pending_reviews_count"`
	ReviewDistribution    map[string]int `json:"review_distribution"`
}

// LLMExplanationRequest defines model for LLMExplanationRequest.
type LLMExplanationRequest struct {
	Text string `json:"text"`
}

// LLMExplanationResponse defines model for LLMExplanationResponse.
type LLMExplanationResponse struct {
	Explanation *string `json:"explanation,omitempty"`
}

// LLMMessage defines model for LLMMessage.
type LLMMessage struct {
	Content string              `json:"content"`
	Id      *openapi_types.UUID `json:"id,omitempty"`
	Role    LLMMessageRole      `json:"role"`
}

// LLMMessageRole defines model for LLMMessage.Role.
type LLMMessageRole string

// Message defines model for Message.
type Message struct {
	Content    string      `json:"content"`
	Function   *string     `json:"function,omitempty"`
	Role       string      `json:"role"`
	Source     *string     `json:"source,omitempty"`
	ToolCallId *string     `json:"tool_call_id,omitempty"`
	ToolCalls  *[]ToolCall `json:"tool_calls,omitempty"`
}

// Output defines model for Output.
type Output struct {
	Choices *[]Choice `json:"choices,omitempty"`
	Model   *string   `json:"model,omitempty"`
	Usage   *Usage    `json:"usage,omitempty"`
}

// Project defines model for Project.
type Project struct {
	CreatedAt time.Time          `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
}

// ProjectCreate defines model for ProjectCreate.
type ProjectCreate struct {
	Name string `json:"name"`
}

// Run defines model for Run.
type Run struct {
	CreatedAt time.Time          `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ProjectId openapi_types.UUID `json:"project_id"`
}

// Status defines model for Status.
type Status string

// SupervisionRequest defines model for SupervisionRequest.
type SupervisionRequest struct {
	ExecutionId  openapi_types.UUID  `json:"execution_id"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	Messages     []LLMMessage        `json:"messages"`
	RunId        openapi_types.UUID  `json:"run_id"`
	Status       *SupervisionStatus  `json:"status,omitempty"`
	SupervisorId *openapi_types.UUID `json:"supervisor_id,omitempty"`
	TaskState    TaskState           `json:"task_state"`
	ToolRequests []ToolRequest       `json:"tool_requests"`
}

// SupervisionResult defines model for SupervisionResult.
type SupervisionResult struct {
	CreatedAt            time.Time          `json:"created_at"`
	Decision             Decision           `json:"decision"`
	Id                   openapi_types.UUID `json:"id"`
	Reasoning            string             `json:"reasoning"`
	SupervisionRequestId openapi_types.UUID `json:"supervision_request_id"`

	// Toolrequest A tool request is a request to use a tool. It must be approved by a supervisor.
	Toolrequest *ToolRequest `json:"toolrequest,omitempty"`
}

// SupervisionStatus defines model for SupervisionStatus.
type SupervisionStatus struct {
	CreatedAt            time.Time           `json:"created_at"`
	Id                   int                 `json:"id"`
	Status               Status              `json:"status"`
	SupervisionRequestId *openapi_types.UUID `json:"supervision_request_id,omitempty"`
}

// Supervisor defines model for Supervisor.
type Supervisor struct {
	Code        *string             `json:"code,omitempty"`
	CreatedAt   time.Time           `json:"created_at"`
	Description string              `json:"description"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`

	// Type The type of supervisor. ClientSupervisor means that the supervision is done client side and the server is merely informed. Other supervisor types are handled serverside, e.g. HumanSupervisor means that a human will review the request via the Sentinel UI.
	Type SupervisorType `json:"type"`
}

// SupervisorType The type of supervisor. ClientSupervisor means that the supervision is done client side and the server is merely informed. Other supervisor types are handled serverside, e.g. HumanSupervisor means that a human will review the request via the Sentinel UI.
type SupervisorType string

// TaskState defines model for TaskState.
type TaskState struct {
	Completed  bool                    `json:"completed"`
	Messages   []Message               `json:"messages"`
	Metadata   *map[string]interface{} `json:"metadata,omitempty"`
	Output     Output                  `json:"output"`
	Store      *map[string]interface{} `json:"store,omitempty"`
	ToolChoice *ToolChoice             `json:"tool_choice,omitempty"`
	Tools      []Tool                  `json:"tools"`
}

// Tool defines model for Tool.
type Tool struct {
	Attributes  *map[string]interface{} `json:"attributes,omitempty"`
	CreatedAt   *time.Time              `json:"created_at,omitempty"`
	Description string                  `json:"description"`
	Id          *openapi_types.UUID     `json:"id,omitempty"`
	Name        string                  `json:"name"`
}

// ToolCall defines model for ToolCall.
type ToolCall struct {
	Arguments  map[string]interface{} `json:"arguments"`
	Function   string                 `json:"function"`
	Id         string                 `json:"id"`
	ParseError *string                `json:"parse_error,omitempty"`
	Type       string                 `json:"type"`
}

// ToolChoice defines model for ToolChoice.
type ToolChoice struct {
	Arguments Arguments `json:"arguments"`
	Function  string    `json:"function"`
	Id        string    `json:"id"`
	Type      string    `json:"type"`
}

// ToolRequest A tool request is a request to use a tool. It must be approved by a supervisor.
type ToolRequest struct {
	Arguments            map[string]interface{} `json:"arguments"`
	Id                   *openapi_types.UUID    `json:"id,omitempty"`
	MessageId            *openapi_types.UUID    `json:"message_id,omitempty"`
	SupervisionRequestId *openapi_types.UUID    `json:"supervision_request_id,omitempty"`
	ToolId               openapi_types.UUID     `json:"tool_id"`
}

// Usage defines model for Usage.
type Usage struct {
	InputTokens  int `json:"input_tokens"`
	OutputTokens int `json:"output_tokens"`
	TotalTokens  int `json:"total_tokens"`
}

// GetSupervisionRequestsParams defines parameters for GetSupervisionRequests.
type GetSupervisionRequestsParams struct {
	Type *SupervisorType `form:"type,omitempty" json:"type,omitempty"`
}

// CreateExecutionJSONBody defines parameters for CreateExecution.
type CreateExecutionJSONBody struct {
	ToolId *openapi_types.UUID `json:"toolId,omitempty"`
}

// CreateRunToolSupervisorsJSONBody defines parameters for CreateRunToolSupervisors.
type CreateRunToolSupervisorsJSONBody = []openapi_types.UUID

// GetSupervisorsParams defines parameters for GetSupervisors.
type GetSupervisorsParams struct {
	// ProjectId Project context for the supervisors query
	ProjectId openapi_types.UUID `form:"projectId" json:"projectId"`
}

// GetToolsParams defines parameters for GetTools.
type GetToolsParams struct {
	// ProjectId Project context for the tools query
	ProjectId openapi_types.UUID `form:"projectId" json:"projectId"`
}

// GetLLMExplanationJSONRequestBody defines body for GetLLMExplanation for application/json ContentType.
type GetLLMExplanationJSONRequestBody = LLMExplanationRequest

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = ProjectCreate

// CreateSupervisionRequestJSONRequestBody defines body for CreateSupervisionRequest for application/json ContentType.
type CreateSupervisionRequestJSONRequestBody = SupervisionRequest

// CreateSupervisionResultJSONRequestBody defines body for CreateSupervisionResult for application/json ContentType.
type CreateSupervisionResultJSONRequestBody = CreateSupervisionResult

// CreateExecutionJSONRequestBody defines body for CreateExecution for application/json ContentType.
type CreateExecutionJSONRequestBody CreateExecutionJSONBody

// CreateRunToolSupervisorsJSONRequestBody defines body for CreateRunToolSupervisors for application/json ContentType.
type CreateRunToolSupervisorsJSONRequestBody = CreateRunToolSupervisorsJSONBody

// CreateSupervisorJSONRequestBody defines body for CreateSupervisor for application/json ContentType.
type CreateSupervisorJSONRequestBody = Supervisor

// CreateToolJSONRequestBody defines body for CreateTool for application/json ContentType.
type CreateToolJSONRequestBody = Tool

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get supervision info for an execution
	// (GET /api/executions/{executionId}/supervisions)
	GetExecutionSupervisions(w http.ResponseWriter, r *http.Request, executionId openapi_types.UUID)
	// Get LLM explanation
	// (POST /api/llm/explanation)
	GetLLMExplanation(w http.ResponseWriter, r *http.Request)
	// Get the OpenAPI schema
	// (GET /api/openapi.yaml)
	GetOpenAPI(w http.ResponseWriter, r *http.Request)
	// List all projects
	// (GET /api/projects)
	GetProjects(w http.ResponseWriter, r *http.Request)
	// Create a new project
	// (POST /api/projects)
	CreateProject(w http.ResponseWriter, r *http.Request)
	// Get project by ID
	// (GET /api/projects/{projectId})
	GetProject(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Get runs for a project
	// (GET /api/projects/{projectId}/runs)
	GetProjectRuns(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Create a new run for a project
	// (POST /api/projects/{projectId}/runs)
	CreateRun(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// List all supervisor requests
	// (GET /api/reviews)
	GetSupervisionRequests(w http.ResponseWriter, r *http.Request, params GetSupervisionRequestsParams)
	// Create a supervisor request
	// (POST /api/reviews)
	CreateSupervisionRequest(w http.ResponseWriter, r *http.Request)
	// Get supervision request by ID
	// (GET /api/reviews/{reviewId})
	GetSupervisionRequest(w http.ResponseWriter, r *http.Request, reviewId openapi_types.UUID)
	// Get supervision results
	// (GET /api/reviews/{reviewId}/results)
	GetSupervisionResults(w http.ResponseWriter, r *http.Request, reviewId openapi_types.UUID)
	// Create a supervision result
	// (POST /api/reviews/{reviewId}/results)
	CreateSupervisionResult(w http.ResponseWriter, r *http.Request, reviewId openapi_types.UUID)
	// Get supervision status
	// (GET /api/reviews/{reviewId}/status)
	GetSupervisionStatus(w http.ResponseWriter, r *http.Request, reviewId openapi_types.UUID)
	// Get tool requests for a supervisor
	// (GET /api/reviews/{reviewId}/toolrequests)
	GetReviewToolRequests(w http.ResponseWriter, r *http.Request, reviewId openapi_types.UUID)
	// Get run by ID
	// (GET /api/runs/{runId})
	GetRun(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get executions for a run
	// (GET /api/runs/{runId}/executions)
	GetRunExecutions(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Create an execution
	// (POST /api/runs/{runId}/executions)
	CreateExecution(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get tools for a run
	// (GET /api/runs/{runId}/tools)
	GetRunTools(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get the supervisors assigned to a tool
	// (GET /api/runs/{runId}/tools/{toolId}/supervisors)
	GetRunToolSupervisors(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID, toolId openapi_types.UUID)
	// Assign a list of supervisors to a tool for a given run
	// (POST /api/runs/{runId}/tools/{toolId}/supervisors)
	CreateRunToolSupervisors(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID, toolId openapi_types.UUID)
	// Get hub stats
	// (GET /api/stats)
	GetHubStats(w http.ResponseWriter, r *http.Request)
	// List all supervisors available for a project
	// (GET /api/supervisors)
	GetSupervisors(w http.ResponseWriter, r *http.Request, params GetSupervisorsParams)
	// Create a new supervisor
	// (POST /api/supervisors)
	CreateSupervisor(w http.ResponseWriter, r *http.Request)
	// Get supervisor by ID
	// (GET /api/supervisors/{supervisorId})
	GetSupervisor(w http.ResponseWriter, r *http.Request, supervisorId openapi_types.UUID)
	// List all tools available for a project
	// (GET /api/tools)
	GetTools(w http.ResponseWriter, r *http.Request, params GetToolsParams)
	// Create a new tool
	// (POST /api/tools)
	CreateTool(w http.ResponseWriter, r *http.Request)
	// Get tool by ID
	// (GET /api/tools/{toolId})
	GetTool(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetExecutionSupervisions operation middleware
func (siw *ServerInterfaceWrapper) GetExecutionSupervisions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "executionId" -------------
	var executionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "executionId", r.PathValue("executionId"), &executionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "executionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExecutionSupervisions(w, r, executionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLLMExplanation operation middleware
func (siw *ServerInterfaceWrapper) GetLLMExplanation(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLLMExplanation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOpenAPI operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPI(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPI(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProject(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProject(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProjectRuns operation middleware
func (siw *ServerInterfaceWrapper) GetProjectRuns(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectRuns(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateRun operation middleware
func (siw *ServerInterfaceWrapper) CreateRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRun(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisionRequests operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisionRequests(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSupervisionRequestsParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisionRequests(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSupervisionRequest operation middleware
func (siw *ServerInterfaceWrapper) CreateSupervisionRequest(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSupervisionRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisionRequest operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisionRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "reviewId" -------------
	var reviewId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "reviewId", r.PathValue("reviewId"), &reviewId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reviewId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisionRequest(w, r, reviewId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisionResults operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisionResults(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "reviewId" -------------
	var reviewId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "reviewId", r.PathValue("reviewId"), &reviewId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reviewId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisionResults(w, r, reviewId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSupervisionResult operation middleware
func (siw *ServerInterfaceWrapper) CreateSupervisionResult(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "reviewId" -------------
	var reviewId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "reviewId", r.PathValue("reviewId"), &reviewId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reviewId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSupervisionResult(w, r, reviewId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisionStatus operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisionStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "reviewId" -------------
	var reviewId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "reviewId", r.PathValue("reviewId"), &reviewId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reviewId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisionStatus(w, r, reviewId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReviewToolRequests operation middleware
func (siw *ServerInterfaceWrapper) GetReviewToolRequests(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "reviewId" -------------
	var reviewId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "reviewId", r.PathValue("reviewId"), &reviewId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reviewId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReviewToolRequests(w, r, reviewId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRun operation middleware
func (siw *ServerInterfaceWrapper) GetRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRun(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunExecutions operation middleware
func (siw *ServerInterfaceWrapper) GetRunExecutions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunExecutions(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateExecution operation middleware
func (siw *ServerInterfaceWrapper) CreateExecution(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateExecution(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunTools operation middleware
func (siw *ServerInterfaceWrapper) GetRunTools(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunTools(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunToolSupervisors operation middleware
func (siw *ServerInterfaceWrapper) GetRunToolSupervisors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunToolSupervisors(w, r, runId, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateRunToolSupervisors operation middleware
func (siw *ServerInterfaceWrapper) CreateRunToolSupervisors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRunToolSupervisors(w, r, runId, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHubStats operation middleware
func (siw *ServerInterfaceWrapper) GetHubStats(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHubStats(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisors operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisors(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSupervisorsParams

	// ------------- Required query parameter "projectId" -------------

	if paramValue := r.URL.Query().Get("projectId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "projectId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "projectId", r.URL.Query(), &params.ProjectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisors(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSupervisor operation middleware
func (siw *ServerInterfaceWrapper) CreateSupervisor(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSupervisor(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisor operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisor(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisorId" -------------
	var supervisorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisorId", r.PathValue("supervisorId"), &supervisorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisorId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisor(w, r, supervisorId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTools operation middleware
func (siw *ServerInterfaceWrapper) GetTools(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetToolsParams

	// ------------- Required query parameter "projectId" -------------

	if paramValue := r.URL.Query().Get("projectId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "projectId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "projectId", r.URL.Query(), &params.ProjectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTools(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTool operation middleware
func (siw *ServerInterfaceWrapper) CreateTool(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTool operation middleware
func (siw *ServerInterfaceWrapper) GetTool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTool(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/executions/{executionId}/supervisions", wrapper.GetExecutionSupervisions)
	m.HandleFunc("POST "+options.BaseURL+"/api/llm/explanation", wrapper.GetLLMExplanation)
	m.HandleFunc("GET "+options.BaseURL+"/api/openapi.yaml", wrapper.GetOpenAPI)
	m.HandleFunc("GET "+options.BaseURL+"/api/projects", wrapper.GetProjects)
	m.HandleFunc("POST "+options.BaseURL+"/api/projects", wrapper.CreateProject)
	m.HandleFunc("GET "+options.BaseURL+"/api/projects/{projectId}", wrapper.GetProject)
	m.HandleFunc("GET "+options.BaseURL+"/api/projects/{projectId}/runs", wrapper.GetProjectRuns)
	m.HandleFunc("POST "+options.BaseURL+"/api/projects/{projectId}/runs", wrapper.CreateRun)
	m.HandleFunc("GET "+options.BaseURL+"/api/reviews", wrapper.GetSupervisionRequests)
	m.HandleFunc("POST "+options.BaseURL+"/api/reviews", wrapper.CreateSupervisionRequest)
	m.HandleFunc("GET "+options.BaseURL+"/api/reviews/{reviewId}", wrapper.GetSupervisionRequest)
	m.HandleFunc("GET "+options.BaseURL+"/api/reviews/{reviewId}/results", wrapper.GetSupervisionResults)
	m.HandleFunc("POST "+options.BaseURL+"/api/reviews/{reviewId}/results", wrapper.CreateSupervisionResult)
	m.HandleFunc("GET "+options.BaseURL+"/api/reviews/{reviewId}/status", wrapper.GetSupervisionStatus)
	m.HandleFunc("GET "+options.BaseURL+"/api/reviews/{reviewId}/toolrequests", wrapper.GetReviewToolRequests)
	m.HandleFunc("GET "+options.BaseURL+"/api/runs/{runId}", wrapper.GetRun)
	m.HandleFunc("GET "+options.BaseURL+"/api/runs/{runId}/executions", wrapper.GetRunExecutions)
	m.HandleFunc("POST "+options.BaseURL+"/api/runs/{runId}/executions", wrapper.CreateExecution)
	m.HandleFunc("GET "+options.BaseURL+"/api/runs/{runId}/tools", wrapper.GetRunTools)
	m.HandleFunc("GET "+options.BaseURL+"/api/runs/{runId}/tools/{toolId}/supervisors", wrapper.GetRunToolSupervisors)
	m.HandleFunc("POST "+options.BaseURL+"/api/runs/{runId}/tools/{toolId}/supervisors", wrapper.CreateRunToolSupervisors)
	m.HandleFunc("GET "+options.BaseURL+"/api/stats", wrapper.GetHubStats)
	m.HandleFunc("GET "+options.BaseURL+"/api/supervisors", wrapper.GetSupervisors)
	m.HandleFunc("POST "+options.BaseURL+"/api/supervisors", wrapper.CreateSupervisor)
	m.HandleFunc("GET "+options.BaseURL+"/api/supervisors/{supervisorId}", wrapper.GetSupervisor)
	m.HandleFunc("GET "+options.BaseURL+"/api/tools", wrapper.GetTools)
	m.HandleFunc("POST "+options.BaseURL+"/api/tools", wrapper.CreateTool)
	m.HandleFunc("GET "+options.BaseURL+"/api/tools/{toolId}", wrapper.GetTool)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
