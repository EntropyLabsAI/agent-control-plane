//go:build go1.22

// Package sentinel provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sentinel

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Decision.
const (
	Approve   Decision = "approve"
	Escalate  Decision = "escalate"
	Modify    Decision = "modify"
	Reject    Decision = "reject"
	Terminate Decision = "terminate"
)

// Defines values for MessageRole.
const (
	MessageRoleAssistant MessageRole = "assistant"
	MessageRoleSystem    MessageRole = "system"
	MessageRoleUser      MessageRole = "user"
)

// Defines values for MessageType.
const (
	Audio    MessageType = "audio"
	Image    MessageType = "image"
	ImageUrl MessageType = "image_url"
	Text     MessageType = "text"
)

// Defines values for SentinelChoiceFinishReason.
const (
	ContentFilter SentinelChoiceFinishReason = "content_filter"
	FunctionCall  SentinelChoiceFinishReason = "function_call"
	Length        SentinelChoiceFinishReason = "length"
	LessThannil   SentinelChoiceFinishReason = "<nil>"
	Stop          SentinelChoiceFinishReason = "stop"
	ToolCalls     SentinelChoiceFinishReason = "tool_calls"
)

// Defines values for SentinelMessageRole.
const (
	SentinelMessageRoleAssistant SentinelMessageRole = "assistant"
	SentinelMessageRoleFunction  SentinelMessageRole = "function"
	SentinelMessageRoleSystem    SentinelMessageRole = "system"
	SentinelMessageRoleTool      SentinelMessageRole = "tool"
	SentinelMessageRoleUser      SentinelMessageRole = "user"
)

// Defines values for SentinelToolCallType.
const (
	Function SentinelToolCallType = "function"
)

// Defines values for Status.
const (
	Assigned  Status = "assigned"
	Completed Status = "completed"
	Failed    Status = "failed"
	Pending   Status = "pending"
	Timeout   Status = "timeout"
)

// Defines values for SupervisorType.
const (
	ClientSupervisor SupervisorType = "client_supervisor"
	HumanSupervisor  SupervisorType = "human_supervisor"
	NoSupervisor     SupervisorType = "no_supervisor"
)

// Arguments defines model for Arguments.
type Arguments map[string]interface{}

// ChainExecution defines model for ChainExecution.
type ChainExecution struct {
	ChainId        openapi_types.UUID `json:"chain_id"`
	CreatedAt      time.Time          `json:"created_at"`
	Id             openapi_types.UUID `json:"id"`
	RequestGroupId openapi_types.UUID `json:"request_group_id"`
}

// ChainExecutionState defines model for ChainExecutionState.
type ChainExecutionState struct {
	Chain               SupervisorChain           `json:"chain"`
	ChainExecution      ChainExecution            `json:"chain_execution"`
	SupervisionRequests []SupervisionRequestState `json:"supervision_requests"`
}

// ChainRequest defines model for ChainRequest.
type ChainRequest struct {
	// SupervisorIds Array of supervisor IDs to create chains with
	SupervisorIds *[]openapi_types.UUID `json:"supervisor_ids,omitempty"`
}

// Choice defines model for Choice.
type Choice struct {
	Message    Message `json:"message"`
	StopReason *string `json:"stop_reason,omitempty"`
}

// Decision defines model for Decision.
type Decision string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Details *string `json:"details,omitempty"`
	Error   string  `json:"error"`
}

// HubStats defines model for HubStats.
type HubStats struct {
	AssignedReviews       map[string]int `json:"assigned_reviews"`
	AssignedReviewsCount  int            `json:"assigned_reviews_count"`
	BusyClients           int            `json:"busy_clients"`
	CompletedReviewsCount int            `json:"completed_reviews_count"`
	ConnectedClients      int            `json:"connected_clients"`
	FreeClients           int            `json:"free_clients"`
	PendingReviewsCount   int            `json:"pending_reviews_count"`
	ReviewDistribution    map[string]int `json:"review_distribution"`
}

// Message defines model for Message.
type Message struct {
	Content   string              `json:"content"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Role      MessageRole         `json:"role"`
	Source    *string             `json:"source,omitempty"`
	ToolCalls *[]SentinelToolCall `json:"tool_calls,omitempty"`
	Type      *MessageType        `json:"type,omitempty"`
}

// MessageRole defines model for MessageRole.
type MessageRole string

// MessageType defines model for MessageType.
type MessageType string

// Output defines model for Output.
type Output struct {
	Choices *[]Choice `json:"choices,omitempty"`
	Model   *string   `json:"model,omitempty"`
	Usage   *Usage    `json:"usage,omitempty"`
}

// Project defines model for Project.
type Project struct {
	CreatedAt     time.Time          `json:"created_at"`
	Id            openapi_types.UUID `json:"id"`
	Name          string             `json:"name"`
	RunResultTags []string           `json:"run_result_tags"`
}

// ReviewPayload Contains all the information needed for a human reviewer to make a supervision decision
type ReviewPayload struct {
	ChainState   ChainExecutionState `json:"chain_state"`
	RequestGroup ToolRequestGroup    `json:"request_group"`

	// RunId The ID of the run this review is for
	RunId              openapi_types.UUID `json:"run_id"`
	SupervisionRequest SupervisionRequest `json:"supervision_request"`
}

// Run defines model for Run.
type Run struct {
	CreatedAt time.Time          `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Result    *string            `json:"result,omitempty"`
	Status    *Status            `json:"status,omitempty"`
	TaskId    openapi_types.UUID `json:"task_id"`
}

// RunExecution defines model for RunExecution.
type RunExecution struct {
	Chains       []ChainExecutionState `json:"chains"`
	RequestGroup ToolRequestGroup      `json:"request_group"`
	Status       Status                `json:"status"`
}

// RunState defines model for RunState.
type RunState = []RunExecution

// SentinelChat The raw b64 encoded JSON of the request and response data sent/received from the LLM.
type SentinelChat struct {
	RequestData  string `json:"request_data"`
	ResponseData string `json:"response_data"`
}

// SentinelChoice defines model for SentinelChoice.
type SentinelChoice struct {
	FinishReason SentinelChoiceFinishReason `json:"finish_reason"`
	Index        int                        `json:"index"`
	Message      SentinelMessage            `json:"message"`
	SentinelId   string                     `json:"sentinel_id"`
}

// SentinelChoiceFinishReason defines model for SentinelChoice.FinishReason.
type SentinelChoiceFinishReason string

// SentinelMessage defines model for SentinelMessage.
type SentinelMessage struct {
	Content    string              `json:"content"`
	Role       SentinelMessageRole `json:"role"`
	SentinelId *string             `json:"sentinel_id,omitempty"`
	ToolCalls  *[]SentinelToolCall `json:"tool_calls,omitempty"`
	Type       *MessageType        `json:"type,omitempty"`
}

// SentinelMessageRole defines model for SentinelMessage.Role.
type SentinelMessageRole string

// SentinelToolCall defines model for SentinelToolCall.
type SentinelToolCall struct {
	// Arguments Arguments in JSON format
	Arguments *string              `json:"arguments,omitempty"`
	Id        *string              `json:"id,omitempty"`
	Name      *string              `json:"name,omitempty"`
	ToolId    string               `json:"tool_id"`
	Type      SentinelToolCallType `json:"type"`
}

// SentinelToolCallType defines model for SentinelToolCall.Type.
type SentinelToolCallType string

// Status defines model for Status.
type Status string

// SupervisionRequest defines model for SupervisionRequest.
type SupervisionRequest struct {
	ChainexecutionId *openapi_types.UUID `json:"chainexecution_id,omitempty"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	PositionInChain  int                 `json:"position_in_chain"`
	Status           *SupervisionStatus  `json:"status,omitempty"`
	SupervisorId     openapi_types.UUID  `json:"supervisor_id"`
}

// SupervisionRequestState defines model for SupervisionRequestState.
type SupervisionRequestState struct {
	Result             *SupervisionResult `json:"result,omitempty"`
	Status             SupervisionStatus  `json:"status"`
	SupervisionRequest SupervisionRequest `json:"supervision_request"`
}

// SupervisionResult defines model for SupervisionResult.
type SupervisionResult struct {
	ChosenToolrequestId  *openapi_types.UUID `json:"chosen_toolrequest_id,omitempty"`
	CreatedAt            time.Time           `json:"created_at"`
	Decision             Decision            `json:"decision"`
	Id                   *openapi_types.UUID `json:"id,omitempty"`
	Reasoning            string              `json:"reasoning"`
	SupervisionRequestId openapi_types.UUID  `json:"supervision_request_id"`
}

// SupervisionStatus defines model for SupervisionStatus.
type SupervisionStatus struct {
	CreatedAt            time.Time           `json:"created_at"`
	Id                   int                 `json:"id"`
	Status               Status              `json:"status"`
	SupervisionRequestId *openapi_types.UUID `json:"supervision_request_id,omitempty"`
}

// Supervisor defines model for Supervisor.
type Supervisor struct {
	Attributes  map[string]interface{} `json:"attributes"`
	Code        string                 `json:"code"`
	CreatedAt   time.Time              `json:"created_at"`
	Description string                 `json:"description"`
	Id          *openapi_types.UUID    `json:"id,omitempty"`
	Name        string                 `json:"name"`

	// Type The type of supervisor. ClientSupervisor means that the supervision is done client side and the server is merely informed. Other supervisor types are handled serverside, e.g. HumanSupervisor means that a human will review the request via the Sentinel UI.
	Type SupervisorType `json:"type"`
}

// SupervisorChain defines model for SupervisorChain.
type SupervisorChain struct {
	ChainId     openapi_types.UUID `json:"chain_id"`
	Supervisors []Supervisor       `json:"supervisors"`
}

// SupervisorType The type of supervisor. ClientSupervisor means that the supervision is done client side and the server is merely informed. Other supervisor types are handled serverside, e.g. HumanSupervisor means that a human will review the request via the Sentinel UI.
type SupervisorType string

// Task defines model for Task.
type Task struct {
	CreatedAt   time.Time          `json:"created_at"`
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
	ProjectId   openapi_types.UUID `json:"project_id"`
}

// TaskState defines model for TaskState.
type TaskState struct {
	Completed  bool                    `json:"completed"`
	Messages   []Message               `json:"messages"`
	Metadata   *map[string]interface{} `json:"metadata,omitempty"`
	Output     Output                  `json:"output"`
	Store      *map[string]interface{} `json:"store,omitempty"`
	ToolChoice *ToolChoice             `json:"tool_choice,omitempty"`
	Tools      []Tool                  `json:"tools"`
}

// Tool defines model for Tool.
type Tool struct {
	Attributes        map[string]interface{} `json:"attributes"`
	Code              string                 `json:"code"`
	Description       string                 `json:"description"`
	Id                *openapi_types.UUID    `json:"id,omitempty"`
	IgnoredAttributes *[]string              `json:"ignored_attributes,omitempty"`
	Name              string                 `json:"name"`
	RunId             openapi_types.UUID     `json:"run_id"`
}

// ToolChoice defines model for ToolChoice.
type ToolChoice struct {
	Arguments Arguments `json:"arguments"`
	Function  string    `json:"function"`
	Id        string    `json:"id"`
	Type      string    `json:"type"`
}

// ToolRequest defines model for ToolRequest.
type ToolRequest struct {
	Arguments      Arguments           `json:"arguments"`
	Id             *openapi_types.UUID `json:"id,omitempty"`
	Message        Message             `json:"message"`
	RequestgroupId *openapi_types.UUID `json:"requestgroup_id,omitempty"`
	TaskState      TaskState           `json:"task_state"`
	ToolId         openapi_types.UUID  `json:"tool_id"`
}

// ToolRequestGroup defines model for ToolRequestGroup.
type ToolRequestGroup struct {
	CreatedAt    *time.Time          `json:"created_at,omitempty"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	ToolRequests []ToolRequest       `json:"tool_requests"`
}

// Usage defines model for Usage.
type Usage struct {
	InputTokens  int `json:"input_tokens"`
	OutputTokens int `json:"output_tokens"`
	TotalTokens  int `json:"total_tokens"`
}

// CreateProjectJSONBody defines parameters for CreateProject.
type CreateProjectJSONBody struct {
	Name          string   `json:"name"`
	RunResultTags []string `json:"run_result_tags"`
}

// CreateTaskJSONBody defines parameters for CreateTask.
type CreateTaskJSONBody struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// UpdateRunResultJSONBody defines parameters for UpdateRunResult.
type UpdateRunResultJSONBody struct {
	Result *string `json:"result,omitempty"`
}

// CreateRunToolJSONBody defines parameters for CreateRunTool.
type CreateRunToolJSONBody struct {
	Attributes        map[string]interface{} `json:"attributes"`
	Code              string                 `json:"code"`
	Description       string                 `json:"description"`
	IgnoredAttributes *[]string              `json:"ignored_attributes,omitempty"`
	Name              string                 `json:"name"`
}

// CreateToolSupervisorChainsJSONBody defines parameters for CreateToolSupervisorChains.
type CreateToolSupervisorChainsJSONBody = []ChainRequest

// CreateSupervisionRequestJSONRequestBody defines body for CreateSupervisionRequest for application/json ContentType.
type CreateSupervisionRequestJSONRequestBody = SupervisionRequest

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody CreateProjectJSONBody

// CreateSupervisorJSONRequestBody defines body for CreateSupervisor for application/json ContentType.
type CreateSupervisorJSONRequestBody = Supervisor

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody CreateTaskJSONBody

// CreateToolRequestJSONRequestBody defines body for CreateToolRequest for application/json ContentType.
type CreateToolRequestJSONRequestBody = ToolRequest

// UpdateRunResultJSONRequestBody defines body for UpdateRunResult for application/json ContentType.
type UpdateRunResultJSONRequestBody UpdateRunResultJSONBody

// UpdateRunStatusJSONRequestBody defines body for UpdateRunStatus for application/json ContentType.
type UpdateRunStatusJSONRequestBody = Status

// CreateRunToolJSONRequestBody defines body for CreateRunTool for application/json ContentType.
type CreateRunToolJSONRequestBody CreateRunToolJSONBody

// CreateNewChatJSONRequestBody defines body for CreateNewChat for application/json ContentType.
type CreateNewChatJSONRequestBody = SentinelChat

// CreateSupervisionResultJSONRequestBody defines body for CreateSupervisionResult for application/json ContentType.
type CreateSupervisionResultJSONRequestBody = SupervisionResult

// CreateToolRequestGroupJSONRequestBody defines body for CreateToolRequestGroup for application/json ContentType.
type CreateToolRequestGroupJSONRequestBody = ToolRequestGroup

// CreateToolSupervisorChainsJSONRequestBody defines body for CreateToolSupervisorChains for application/json ContentType.
type CreateToolSupervisorChainsJSONRequestBody = CreateToolSupervisorChainsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a supervision request for a supervisor in a chain on a request group
	// (POST /api/request_group/{requestGroupId}/chain/{chainId}/supervisor/{supervisorId}/supervision_request)
	CreateSupervisionRequest(w http.ResponseWriter, r *http.Request, requestGroupId openapi_types.UUID, chainId openapi_types.UUID, supervisorId openapi_types.UUID)
	// Get the OpenAPI schema
	// (GET /openapi.yaml)
	GetOpenAPI(w http.ResponseWriter, r *http.Request)
	// Get all projects
	// (GET /project)
	GetProjects(w http.ResponseWriter, r *http.Request)
	// Create a new project
	// (POST /project)
	CreateProject(w http.ResponseWriter, r *http.Request)
	// Get a project
	// (GET /project/{projectId})
	GetProject(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Get all supervisors
	// (GET /project/{projectId}/supervisor)
	GetSupervisors(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Create a new supervisor
	// (POST /project/{projectId}/supervisor)
	CreateSupervisor(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Get all tasks for a project
	// (GET /project/{projectId}/tasks)
	GetProjectTasks(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Create a new task
	// (POST /project/{projectId}/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Get all tools for a project
	// (GET /project/{projectId}/tools)
	GetProjectTools(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Get a request group
	// (GET /request_group/{requestGroupId})
	GetRequestGroup(w http.ResponseWriter, r *http.Request, requestGroupId openapi_types.UUID)
	// Get a request group status
	// (GET /request_group/{requestGroupId}/status)
	GetRequestGroupStatus(w http.ResponseWriter, r *http.Request, requestGroupId openapi_types.UUID)
	// Create a new tool request for a request group
	// (POST /request_group/{requestGroupId}/tool_requests)
	CreateToolRequest(w http.ResponseWriter, r *http.Request, requestGroupId openapi_types.UUID)
	// Get a run
	// (GET /run/{runId})
	GetRun(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get all request groups for a run
	// (GET /run/{runId}/request_groups)
	GetRunRequestGroups(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Update a run with a result
	// (PUT /run/{runId}/result)
	UpdateRunResult(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get the state of a run
	// (GET /run/{runId}/state)
	GetRunState(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get the status of a run
	// (GET /run/{runId}/status)
	GetRunStatus(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Update the status of a run
	// (PUT /run/{runId}/status)
	UpdateRunStatus(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get all tools for a run
	// (GET /run/{runId}/tool)
	GetRunTools(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Create a new tool for a run
	// (POST /run/{runId}/tool)
	CreateRunTool(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Create a new chat completion request from an existing run
	// (POST /run/{run_id}/chat)
	CreateNewChat(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get hub stats
	// (GET /stats)
	GetHubStats(w http.ResponseWriter, r *http.Request)
	// Get a supervision result
	// (GET /supervision_request/{supervisionRequestId}/result)
	GetSupervisionResult(w http.ResponseWriter, r *http.Request, supervisionRequestId openapi_types.UUID)
	// Create a supervision result for a supervision request
	// (POST /supervision_request/{supervisionRequestId}/result)
	CreateSupervisionResult(w http.ResponseWriter, r *http.Request, supervisionRequestId openapi_types.UUID)
	// Get the review payload for a supervision request
	// (GET /supervision_request/{supervisionRequestId}/review_payload)
	GetSupervisionReviewPayload(w http.ResponseWriter, r *http.Request, supervisionRequestId openapi_types.UUID)
	// Get a supervision request status
	// (GET /supervision_request/{supervisionRequestId}/status)
	GetSupervisionRequestStatus(w http.ResponseWriter, r *http.Request, supervisionRequestId openapi_types.UUID)
	// Get a supervisor
	// (GET /supervisor/{supervisorId})
	GetSupervisor(w http.ResponseWriter, r *http.Request, supervisorId openapi_types.UUID)
	// Get the Swagger UI
	// (GET /swagger-ui)
	GetSwaggerDocs(w http.ResponseWriter, r *http.Request)
	// Get a task
	// (GET /task/{taskId})
	GetTask(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID)
	// Get all runs for a task
	// (GET /task/{taskId}/run)
	GetTaskRuns(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID)
	// Create a new run for a task
	// (POST /task/{taskId}/run)
	CreateRun(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID)
	// Get a tool
	// (GET /tool/{toolId})
	GetTool(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
	// Create a new request group for a tool
	// (POST /tool/{toolId}/request_group)
	CreateToolRequestGroup(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
	// Get all supervisors for a tool, in chain format
	// (GET /tool/{toolId}/supervisors)
	GetToolSupervisorChains(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
	// Create new chains with supervisors for a tool
	// (POST /tool/{toolId}/supervisors)
	CreateToolSupervisorChains(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
	// Get a tool request
	// (GET /tool_request/{toolRequestId})
	GetToolRequest(w http.ResponseWriter, r *http.Request, toolRequestId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateSupervisionRequest operation middleware
func (siw *ServerInterfaceWrapper) CreateSupervisionRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestGroupId" -------------
	var requestGroupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "requestGroupId", r.PathValue("requestGroupId"), &requestGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestGroupId", Err: err})
		return
	}

	// ------------- Path parameter "chainId" -------------
	var chainId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "chainId", r.PathValue("chainId"), &chainId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chainId", Err: err})
		return
	}

	// ------------- Path parameter "supervisorId" -------------
	var supervisorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisorId", r.PathValue("supervisorId"), &supervisorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisorId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSupervisionRequest(w, r, requestGroupId, chainId, supervisorId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOpenAPI operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPI(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPI(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProject(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProject(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisors operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisors(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSupervisor operation middleware
func (siw *ServerInterfaceWrapper) CreateSupervisor(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSupervisor(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProjectTasks operation middleware
func (siw *ServerInterfaceWrapper) GetProjectTasks(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectTasks(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProjectTools operation middleware
func (siw *ServerInterfaceWrapper) GetProjectTools(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectTools(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRequestGroup operation middleware
func (siw *ServerInterfaceWrapper) GetRequestGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestGroupId" -------------
	var requestGroupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "requestGroupId", r.PathValue("requestGroupId"), &requestGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestGroupId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRequestGroup(w, r, requestGroupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRequestGroupStatus operation middleware
func (siw *ServerInterfaceWrapper) GetRequestGroupStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestGroupId" -------------
	var requestGroupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "requestGroupId", r.PathValue("requestGroupId"), &requestGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestGroupId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRequestGroupStatus(w, r, requestGroupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateToolRequest operation middleware
func (siw *ServerInterfaceWrapper) CreateToolRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestGroupId" -------------
	var requestGroupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "requestGroupId", r.PathValue("requestGroupId"), &requestGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestGroupId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateToolRequest(w, r, requestGroupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRun operation middleware
func (siw *ServerInterfaceWrapper) GetRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRun(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunRequestGroups operation middleware
func (siw *ServerInterfaceWrapper) GetRunRequestGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunRequestGroups(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateRunResult operation middleware
func (siw *ServerInterfaceWrapper) UpdateRunResult(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRunResult(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunState operation middleware
func (siw *ServerInterfaceWrapper) GetRunState(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunState(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunStatus operation middleware
func (siw *ServerInterfaceWrapper) GetRunStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunStatus(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateRunStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateRunStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRunStatus(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunTools operation middleware
func (siw *ServerInterfaceWrapper) GetRunTools(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunTools(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateRunTool operation middleware
func (siw *ServerInterfaceWrapper) CreateRunTool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRunTool(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateNewChat operation middleware
func (siw *ServerInterfaceWrapper) CreateNewChat(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "run_id" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", r.PathValue("run_id"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNewChat(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHubStats operation middleware
func (siw *ServerInterfaceWrapper) GetHubStats(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHubStats(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisionResult operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisionResult(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisionRequestId" -------------
	var supervisionRequestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisionRequestId", r.PathValue("supervisionRequestId"), &supervisionRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisionRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisionResult(w, r, supervisionRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSupervisionResult operation middleware
func (siw *ServerInterfaceWrapper) CreateSupervisionResult(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisionRequestId" -------------
	var supervisionRequestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisionRequestId", r.PathValue("supervisionRequestId"), &supervisionRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisionRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSupervisionResult(w, r, supervisionRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisionReviewPayload operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisionReviewPayload(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisionRequestId" -------------
	var supervisionRequestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisionRequestId", r.PathValue("supervisionRequestId"), &supervisionRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisionRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisionReviewPayload(w, r, supervisionRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisionRequestStatus operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisionRequestStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisionRequestId" -------------
	var supervisionRequestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisionRequestId", r.PathValue("supervisionRequestId"), &supervisionRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisionRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisionRequestStatus(w, r, supervisionRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisor operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisor(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisorId" -------------
	var supervisorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisorId", r.PathValue("supervisorId"), &supervisorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisorId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisor(w, r, supervisorId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSwaggerDocs operation middleware
func (siw *ServerInterfaceWrapper) GetSwaggerDocs(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSwaggerDocs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", r.PathValue("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTask(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTaskRuns operation middleware
func (siw *ServerInterfaceWrapper) GetTaskRuns(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", r.PathValue("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskRuns(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateRun operation middleware
func (siw *ServerInterfaceWrapper) CreateRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", r.PathValue("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRun(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTool operation middleware
func (siw *ServerInterfaceWrapper) GetTool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTool(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateToolRequestGroup operation middleware
func (siw *ServerInterfaceWrapper) CreateToolRequestGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateToolRequestGroup(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetToolSupervisorChains operation middleware
func (siw *ServerInterfaceWrapper) GetToolSupervisorChains(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetToolSupervisorChains(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateToolSupervisorChains operation middleware
func (siw *ServerInterfaceWrapper) CreateToolSupervisorChains(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateToolSupervisorChains(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetToolRequest operation middleware
func (siw *ServerInterfaceWrapper) GetToolRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolRequestId" -------------
	var toolRequestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolRequestId", r.PathValue("toolRequestId"), &toolRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetToolRequest(w, r, toolRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/api/request_group/{requestGroupId}/chain/{chainId}/supervisor/{supervisorId}/supervision_request", wrapper.CreateSupervisionRequest)
	m.HandleFunc("GET "+options.BaseURL+"/openapi.yaml", wrapper.GetOpenAPI)
	m.HandleFunc("GET "+options.BaseURL+"/project", wrapper.GetProjects)
	m.HandleFunc("POST "+options.BaseURL+"/project", wrapper.CreateProject)
	m.HandleFunc("GET "+options.BaseURL+"/project/{projectId}", wrapper.GetProject)
	m.HandleFunc("GET "+options.BaseURL+"/project/{projectId}/supervisor", wrapper.GetSupervisors)
	m.HandleFunc("POST "+options.BaseURL+"/project/{projectId}/supervisor", wrapper.CreateSupervisor)
	m.HandleFunc("GET "+options.BaseURL+"/project/{projectId}/tasks", wrapper.GetProjectTasks)
	m.HandleFunc("POST "+options.BaseURL+"/project/{projectId}/tasks", wrapper.CreateTask)
	m.HandleFunc("GET "+options.BaseURL+"/project/{projectId}/tools", wrapper.GetProjectTools)
	m.HandleFunc("GET "+options.BaseURL+"/request_group/{requestGroupId}", wrapper.GetRequestGroup)
	m.HandleFunc("GET "+options.BaseURL+"/request_group/{requestGroupId}/status", wrapper.GetRequestGroupStatus)
	m.HandleFunc("POST "+options.BaseURL+"/request_group/{requestGroupId}/tool_requests", wrapper.CreateToolRequest)
	m.HandleFunc("GET "+options.BaseURL+"/run/{runId}", wrapper.GetRun)
	m.HandleFunc("GET "+options.BaseURL+"/run/{runId}/request_groups", wrapper.GetRunRequestGroups)
	m.HandleFunc("PUT "+options.BaseURL+"/run/{runId}/result", wrapper.UpdateRunResult)
	m.HandleFunc("GET "+options.BaseURL+"/run/{runId}/state", wrapper.GetRunState)
	m.HandleFunc("GET "+options.BaseURL+"/run/{runId}/status", wrapper.GetRunStatus)
	m.HandleFunc("PUT "+options.BaseURL+"/run/{runId}/status", wrapper.UpdateRunStatus)
	m.HandleFunc("GET "+options.BaseURL+"/run/{runId}/tool", wrapper.GetRunTools)
	m.HandleFunc("POST "+options.BaseURL+"/run/{runId}/tool", wrapper.CreateRunTool)
	m.HandleFunc("POST "+options.BaseURL+"/run/{run_id}/chat", wrapper.CreateNewChat)
	m.HandleFunc("GET "+options.BaseURL+"/stats", wrapper.GetHubStats)
	m.HandleFunc("GET "+options.BaseURL+"/supervision_request/{supervisionRequestId}/result", wrapper.GetSupervisionResult)
	m.HandleFunc("POST "+options.BaseURL+"/supervision_request/{supervisionRequestId}/result", wrapper.CreateSupervisionResult)
	m.HandleFunc("GET "+options.BaseURL+"/supervision_request/{supervisionRequestId}/review_payload", wrapper.GetSupervisionReviewPayload)
	m.HandleFunc("GET "+options.BaseURL+"/supervision_request/{supervisionRequestId}/status", wrapper.GetSupervisionRequestStatus)
	m.HandleFunc("GET "+options.BaseURL+"/supervisor/{supervisorId}", wrapper.GetSupervisor)
	m.HandleFunc("GET "+options.BaseURL+"/swagger-ui", wrapper.GetSwaggerDocs)
	m.HandleFunc("GET "+options.BaseURL+"/task/{taskId}", wrapper.GetTask)
	m.HandleFunc("GET "+options.BaseURL+"/task/{taskId}/run", wrapper.GetTaskRuns)
	m.HandleFunc("POST "+options.BaseURL+"/task/{taskId}/run", wrapper.CreateRun)
	m.HandleFunc("GET "+options.BaseURL+"/tool/{toolId}", wrapper.GetTool)
	m.HandleFunc("POST "+options.BaseURL+"/tool/{toolId}/request_group", wrapper.CreateToolRequestGroup)
	m.HandleFunc("GET "+options.BaseURL+"/tool/{toolId}/supervisors", wrapper.GetToolSupervisorChains)
	m.HandleFunc("POST "+options.BaseURL+"/tool/{toolId}/supervisors", wrapper.CreateToolSupervisorChains)
	m.HandleFunc("GET "+options.BaseURL+"/tool_request/{toolRequestId}", wrapper.GetToolRequest)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kv3d/n8BAAD//+lqkmvZaAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
