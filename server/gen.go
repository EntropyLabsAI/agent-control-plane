//go:build go1.22

// Package sentinel provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sentinel

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for LLMMessageRole.
const (
	Assistant LLMMessageRole = "assistant"
	System    LLMMessageRole = "system"
	User      LLMMessageRole = "user"
)

// Defines values for ReviewResultDecision.
const (
	Approve   ReviewResultDecision = "approve"
	Escalate  ReviewResultDecision = "escalate"
	Modify    ReviewResultDecision = "modify"
	Reject    ReviewResultDecision = "reject"
	Terminate ReviewResultDecision = "terminate"
)

// Defines values for ReviewStatusStatus.
const (
	Completed ReviewStatusStatus = "completed"
	Pending   ReviewStatusStatus = "pending"
	Timeout   ReviewStatusStatus = "timeout"
)

// Defines values for SupervisorType.
const (
	SupervisorTypeCode  SupervisorType = "code"
	SupervisorTypeHuman SupervisorType = "human"
	SupervisorTypeLlm   SupervisorType = "llm"
)

// Defines values for ListReviewsParamsType.
const (
	ListReviewsParamsTypeHuman ListReviewsParamsType = "human"
	ListReviewsParamsTypeLlm   ListReviewsParamsType = "llm"
)

// Defines values for ListSupervisorsParamsType.
const (
	Code  ListSupervisorsParamsType = "code"
	Human ListSupervisorsParamsType = "human"
	Llm   ListSupervisorsParamsType = "llm"
)

// LLMMessage defines model for LLMMessage.
type LLMMessage struct {
	Content string             `json:"content"`
	Id      openapi_types.UUID `json:"id"`
	Role    LLMMessageRole     `json:"role"`
}

// LLMMessageRole defines model for LLMMessage.Role.
type LLMMessageRole string

// Project defines model for Project.
type Project struct {
	CreatedAt int64              `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
}

// ProjectCreate defines model for ProjectCreate.
type ProjectCreate struct {
	Name string `json:"name"`
}

// Review defines model for Review.
type Review struct {
	Id        openapi_types.UUID     `json:"id"`
	RunId     openapi_types.UUID     `json:"run_id"`
	Status    *ReviewStatus          `json:"status,omitempty"`
	TaskState map[string]interface{} `json:"task_state"`
}

// ReviewRequest defines model for ReviewRequest.
type ReviewRequest struct {
	Id          *openapi_types.UUID    `json:"id,omitempty"`
	Messages    []LLMMessage           `json:"messages"`
	RunId       openapi_types.UUID     `json:"run_id"`
	TaskState   map[string]interface{} `json:"task_state"`
	ToolChoices []ToolRequest          `json:"tool_choices"`
}

// ReviewResult defines model for ReviewResult.
type ReviewResult struct {
	CreatedAt       int64                `json:"created_at"`
	Decision        ReviewResultDecision `json:"decision"`
	Id              openapi_types.UUID   `json:"id"`
	Reasoning       string               `json:"reasoning"`
	ReviewRequestId openapi_types.UUID   `json:"review_request_id"`
	Toolrequest     *ToolRequest         `json:"toolrequest,omitempty"`
}

// ReviewResultDecision defines model for ReviewResult.Decision.
type ReviewResultDecision string

// ReviewStatus defines model for ReviewStatus.
type ReviewStatus struct {
	CreatedAt int64              `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Status    ReviewStatusStatus `json:"status"`
}

// ReviewStatusStatus defines model for ReviewStatus.Status.
type ReviewStatusStatus string

// Run defines model for Run.
type Run struct {
	CreatedAt int64              `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ProjectId openapi_types.UUID `json:"project_id"`
}

// Supervisor defines model for Supervisor.
type Supervisor struct {
	CreatedAt   int64              `json:"created_at"`
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	Type        SupervisorType     `json:"type"`
}

// SupervisorType defines model for Supervisor.Type.
type SupervisorType string

// SupervisorAssignment defines model for SupervisorAssignment.
type SupervisorAssignment struct {
	SupervisorId openapi_types.UUID `json:"supervisor_id"`
}

// Tool defines model for Tool.
type Tool struct {
	Attributes  *map[string]interface{} `json:"attributes,omitempty"`
	CreatedAt   *int64                  `json:"created_at,omitempty"`
	Description string                  `json:"description"`
	Id          openapi_types.UUID      `json:"id"`
	Name        string                  `json:"name"`
}

// ToolCreate defines model for ToolCreate.
type ToolCreate struct {
	Attributes  *map[string]interface{} `json:"attributes,omitempty"`
	Description string                  `json:"description"`
	Name        string                  `json:"name"`
}

// ToolRequest defines model for ToolRequest.
type ToolRequest struct {
	Arguments       map[string]interface{} `json:"arguments"`
	Id              openapi_types.UUID     `json:"id"`
	MessageId       *openapi_types.UUID    `json:"message_id,omitempty"`
	ReviewRequestId openapi_types.UUID     `json:"review_request_id"`
	ToolId          openapi_types.UUID     `json:"tool_id"`
}

// ListReviewsParams defines parameters for ListReviews.
type ListReviewsParams struct {
	Type *ListReviewsParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// ListReviewsParamsType defines parameters for ListReviews.
type ListReviewsParamsType string

// ListSupervisorsParams defines parameters for ListSupervisors.
type ListSupervisorsParams struct {
	Type *ListSupervisorsParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// ListSupervisorsParamsType defines parameters for ListSupervisors.
type ListSupervisorsParamsType string

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = ProjectCreate

// CreateReviewJSONRequestBody defines body for CreateReview for application/json ContentType.
type CreateReviewJSONRequestBody = ReviewRequest

// AssignSupervisorJSONRequestBody defines body for AssignSupervisor for application/json ContentType.
type AssignSupervisorJSONRequestBody = SupervisorAssignment

// CreateToolJSONRequestBody defines body for CreateTool for application/json ContentType.
type CreateToolJSONRequestBody = ToolCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all projects
	// (GET /api/projects)
	ListProjects(w http.ResponseWriter, r *http.Request)
	// Create a new project
	// (POST /api/projects)
	CreateProject(w http.ResponseWriter, r *http.Request)
	// Get project by ID
	// (GET /api/projects/{projectId})
	GetProject(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Create a new run for a project
	// (POST /api/projects/{projectId}/runs)
	CreateRun(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// List all reviews
	// (GET /api/reviews)
	ListReviews(w http.ResponseWriter, r *http.Request, params ListReviewsParams)
	// Create a review request
	// (POST /api/reviews)
	CreateReview(w http.ResponseWriter, r *http.Request)
	// Get review by ID
	// (GET /api/reviews/{reviewId})
	GetReview(w http.ResponseWriter, r *http.Request, reviewId openapi_types.UUID)
	// Get review results
	// (GET /api/reviews/{reviewId}/results)
	GetReviewResults(w http.ResponseWriter, r *http.Request, reviewId openapi_types.UUID)
	// Get review status
	// (GET /api/reviews/{reviewId}/status)
	GetReviewStatus(w http.ResponseWriter, r *http.Request, reviewId openapi_types.UUID)
	// Get tool requests for a review
	// (GET /api/reviews/{reviewId}/toolrequests)
	GetReviewToolRequests(w http.ResponseWriter, r *http.Request, reviewId openapi_types.UUID)
	// Get run by ID
	// (GET /api/runs/{runId})
	GetRun(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get supervisors assigned to a run
	// (GET /api/runs/{runId}/supervisors)
	GetRunSupervisors(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Assign supervisor to run
	// (POST /api/runs/{runId}/supervisors)
	AssignSupervisor(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// Get tools associated with a run
	// (GET /api/runs/{runId}/tools)
	GetRunTools(w http.ResponseWriter, r *http.Request, runId openapi_types.UUID)
	// List all supervisors
	// (GET /api/supervisors)
	ListSupervisors(w http.ResponseWriter, r *http.Request, params ListSupervisorsParams)
	// Get supervisor by ID
	// (GET /api/supervisors/{supervisorId})
	GetSupervisor(w http.ResponseWriter, r *http.Request, supervisorId openapi_types.UUID)
	// List all tools
	// (GET /api/tools)
	ListTools(w http.ResponseWriter, r *http.Request)
	// Create a new tool
	// (POST /api/tools)
	CreateTool(w http.ResponseWriter, r *http.Request)
	// Get tool by ID
	// (GET /api/tools/{toolId})
	GetTool(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
	// Get projects for a user
	// (GET /api/users/{userId}/projects)
	GetUserProjects(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListProjects operation middleware
func (siw *ServerInterfaceWrapper) ListProjects(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProject(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProject(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateRun operation middleware
func (siw *ServerInterfaceWrapper) CreateRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRun(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListReviews operation middleware
func (siw *ServerInterfaceWrapper) ListReviews(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListReviewsParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListReviews(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateReview operation middleware
func (siw *ServerInterfaceWrapper) CreateReview(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateReview(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReview operation middleware
func (siw *ServerInterfaceWrapper) GetReview(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "reviewId" -------------
	var reviewId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "reviewId", r.PathValue("reviewId"), &reviewId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reviewId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReview(w, r, reviewId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReviewResults operation middleware
func (siw *ServerInterfaceWrapper) GetReviewResults(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "reviewId" -------------
	var reviewId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "reviewId", r.PathValue("reviewId"), &reviewId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reviewId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReviewResults(w, r, reviewId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReviewStatus operation middleware
func (siw *ServerInterfaceWrapper) GetReviewStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "reviewId" -------------
	var reviewId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "reviewId", r.PathValue("reviewId"), &reviewId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reviewId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReviewStatus(w, r, reviewId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReviewToolRequests operation middleware
func (siw *ServerInterfaceWrapper) GetReviewToolRequests(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "reviewId" -------------
	var reviewId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "reviewId", r.PathValue("reviewId"), &reviewId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reviewId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReviewToolRequests(w, r, reviewId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRun operation middleware
func (siw *ServerInterfaceWrapper) GetRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRun(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunSupervisors operation middleware
func (siw *ServerInterfaceWrapper) GetRunSupervisors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunSupervisors(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AssignSupervisor operation middleware
func (siw *ServerInterfaceWrapper) AssignSupervisor(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AssignSupervisor(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunTools operation middleware
func (siw *ServerInterfaceWrapper) GetRunTools(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runId" -------------
	var runId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "runId", r.PathValue("runId"), &runId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunTools(w, r, runId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSupervisors operation middleware
func (siw *ServerInterfaceWrapper) ListSupervisors(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSupervisorsParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSupervisors(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupervisor operation middleware
func (siw *ServerInterfaceWrapper) GetSupervisor(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "supervisorId" -------------
	var supervisorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "supervisorId", r.PathValue("supervisorId"), &supervisorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "supervisorId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupervisor(w, r, supervisorId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTools operation middleware
func (siw *ServerInterfaceWrapper) ListTools(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTools(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTool operation middleware
func (siw *ServerInterfaceWrapper) CreateTool(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTool operation middleware
func (siw *ServerInterfaceWrapper) GetTool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "toolId" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "toolId", r.PathValue("toolId"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTool(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserProjects operation middleware
func (siw *ServerInterfaceWrapper) GetUserProjects(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserProjects(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/projects", wrapper.ListProjects)
	m.HandleFunc("POST "+options.BaseURL+"/api/projects", wrapper.CreateProject)
	m.HandleFunc("GET "+options.BaseURL+"/api/projects/{projectId}", wrapper.GetProject)
	m.HandleFunc("POST "+options.BaseURL+"/api/projects/{projectId}/runs", wrapper.CreateRun)
	m.HandleFunc("GET "+options.BaseURL+"/api/reviews", wrapper.ListReviews)
	m.HandleFunc("POST "+options.BaseURL+"/api/reviews", wrapper.CreateReview)
	m.HandleFunc("GET "+options.BaseURL+"/api/reviews/{reviewId}", wrapper.GetReview)
	m.HandleFunc("GET "+options.BaseURL+"/api/reviews/{reviewId}/results", wrapper.GetReviewResults)
	m.HandleFunc("GET "+options.BaseURL+"/api/reviews/{reviewId}/status", wrapper.GetReviewStatus)
	m.HandleFunc("GET "+options.BaseURL+"/api/reviews/{reviewId}/toolrequests", wrapper.GetReviewToolRequests)
	m.HandleFunc("GET "+options.BaseURL+"/api/runs/{runId}", wrapper.GetRun)
	m.HandleFunc("GET "+options.BaseURL+"/api/runs/{runId}/supervisors", wrapper.GetRunSupervisors)
	m.HandleFunc("POST "+options.BaseURL+"/api/runs/{runId}/supervisors", wrapper.AssignSupervisor)
	m.HandleFunc("GET "+options.BaseURL+"/api/runs/{runId}/tools", wrapper.GetRunTools)
	m.HandleFunc("GET "+options.BaseURL+"/api/supervisors", wrapper.ListSupervisors)
	m.HandleFunc("GET "+options.BaseURL+"/api/supervisors/{supervisorId}", wrapper.GetSupervisor)
	m.HandleFunc("GET "+options.BaseURL+"/api/tools", wrapper.ListTools)
	m.HandleFunc("POST "+options.BaseURL+"/api/tools", wrapper.CreateTool)
	m.HandleFunc("GET "+options.BaseURL+"/api/tools/{toolId}", wrapper.GetTool)
	m.HandleFunc("GET "+options.BaseURL+"/api/users/{userId}/projects", wrapper.GetUserProjects)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"liCDroHVf/9yOv0XAAD//7smhnfgKgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
