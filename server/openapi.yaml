openapi: 3.0.1
info:
  title: Sentinel API
  version: 1.0.0

paths:
  /api/projects:
    post:
      summary: Create a new project
      operationId: CreateProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreate"
      responses:
        "200":
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
      tags:
        - Projects
    get:
      summary: List all projects
      operationId: GetProjects
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
      tags:
        - Projects

  /api/projects/{projectId}/runs:
    post:
      summary: Create a new run for a project
      operationId: CreateRun
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Run created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
      tags:
        - Runs

  /api/tools/{toolId}/supervisors:
    get:
      summary: Get supervisors assigned to a tool
      operationId: GetToolSupervisors
      parameters:
        - name: toolId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of supervisors assigned to the tool
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Supervisor"
      tags:
        - Tools
        - Supervisors
    post:
      summary: Assign supervisor to tool
      operationId: AssignSupervisorToTool
      parameters:
        - name: toolId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SupervisorAssignment"
      responses:
        "200":
          description: Supervisor assigned successfully
      tags:
        - Supervisors

  /api/reviews:
    post:
      summary: Create a review request
      operationId: CreateReview
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewRequest"
      responses:
        "200":
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewStatus"
      tags:
        - Reviews
    get:
      summary: List all reviews
      operationId: GetReviews
      parameters:
        - name: type
          in: query
          schema:
            $ref: "#/components/schemas/SupervisorType"
      responses:
        "200":
          description: List of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
      tags:
        - Reviews

  /api/reviews/{reviewId}/status:
    get:
      summary: Get review status
      operationId: GetReviewStatus
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Review status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewStatus"
      tags:
        - Reviews

  /api/tools:
    get:
      summary: List all tools
      operationId: GetTools
      responses:
        "200":
          description: List of tools
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tool"
      tags:
        - Tools
    post:
      summary: Create a new tool
      operationId: CreateTool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ToolCreate"
      responses:
        "200":
          description: Tool created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tool"
      tags:
        - Tools

  /api/tools/{toolId}:
    get:
      summary: Get tool by ID
      operationId: GetTool
      parameters:
        - name: toolId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Tool details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tool"
        "404":
          description: Tool not found
      tags:
        - Tools

  /api/runs/{runId}/tools:
    get:
      summary: Get tools associated with a run
      operationId: GetRunTools
      parameters:
        - name: runId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of tools associated with the run
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tool"
      tags:
        - Tools
        - Runs

  /api/projects/{projectId}:
    get:
      summary: Get project by ID
      operationId: GetProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Project details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "404":
          description: Project not found
      tags:
        - Projects

  /api/runs/{runId}:
    get:
      summary: Get run by ID
      operationId: GetRun
      parameters:
        - name: runId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Run details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        "404":
          description: Run not found
      tags:
        - Runs

  /api/supervisors:
    get:
      summary: List all supervisors
      operationId: GetSupervisors
      responses:
        "200":
          description: List of supervisors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Supervisor"
      tags:
        - Supervisors

  /api/supervisors/{supervisorId}:
    get:
      summary: Get supervisor by ID
      operationId: GetSupervisor
      parameters:
        - name: supervisorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Supervisor details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Supervisor"
        "404":
          description: Supervisor not found
      tags:
        - Supervisors

  /api/reviews/{reviewId}:
    get:
      summary: Get review by ID
      operationId: GetReview
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Review details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "404":
          description: Review not found
      tags:
        - Reviews

  /api/reviews/{reviewId}/results:
    get:
      summary: Get review results
      operationId: GetReviewResults
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Review results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewResult"
      tags:
        - Reviews

  /api/reviews/{reviewId}/toolrequests:
    get:
      summary: Get tool requests for a review
      operationId: GetReviewToolRequests
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Tool requests for the review
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolRequest"
      tags:
        - Reviews
        - Tools

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
      required:
        - id

    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: integer
          format: int64
      required:
        - id
        - name
        - created_at

    ProjectCreate:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    Run:
      type: object
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        created_at:
          type: integer
          format: int64
      required:
        - id
        - project_id
        - created_at

    Supervisor:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        created_at:
          type: integer
          format: int64
        type:
          $ref: "#/components/schemas/SupervisorType"
      required:
        - id
        - type
        - created_at

    SupervisorAssignment:
      type: object
      properties:
        supervisor_id:
          type: string
          format: uuid
      required:
        - supervisor_id

    Tool:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        attributes:
          type: object
          additionalProperties: true
        created_at:
          type: integer
          format: int64
      required:
        - id
        - name
        - description

    ReviewRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        run_id:
          type: string
          format: uuid
        task_state:
          type: object
          additionalProperties: true
        tool_choices:
          type: array
          items:
            $ref: "#/components/schemas/ToolRequest"
        messages:
          type: array
          items:
            $ref: "#/components/schemas/LLMMessage"
      required:
        - run_id
        - task_state
        - tool_choices
        - messages

    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        run_id:
          type: string
          format: uuid
        task_state:
          type: object
          additionalProperties: true
        status:
          $ref: "#/components/schemas/ReviewStatus"
      required:
        - id
        - run_id
        - task_state

    ReviewStatus:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum: [timeout, pending, completed]
        created_at:
          type: integer
          format: int64
      required:
        - id
        - status
        - created_at

    ReviewResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
        review_request_id:
          type: string
          format: uuid
        created_at:
          type: integer
          format: int64
        decision:
          type: string
          enum: [approve, reject, terminate, modify, escalate]
        toolrequest:
          $ref: "#/components/schemas/ToolRequest"
        reasoning:
          type: string
      required:
        - id
        - review_request_id
        - created_at
        - decision
        - reasoning

    LLMMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        role:
          type: string
          enum: [system, user, assistant]
        content:
          type: string
      required:
        - id
        - role
        - content

    ToolRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tool_id:
          type: string
          format: uuid
        review_request_id:
          type: string
          format: uuid
        message_id:
          type: string
          format: uuid
        arguments:
          type: object
          additionalProperties: true
      required:
        - id
        - review_request_id
        - tool_id
        - arguments

    ToolCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        attributes:
          type: object
          additionalProperties: true
      required:
        - name
        - description

    SupervisorType:
      type: string
      enum: [code, llm, human, all]
