openapi: 3.0.1
info:
  title: Sentinel API
  version: 1.0.0

paths:
  /api/openapi.yaml:
    get:
      summary: Get the OpenAPI schema
      operationId: GetOpenAPI
      responses:
        "200":
          description: OpenAPI schema
      tags:
        - API

  /api/projects:
    post:
      summary: Create a new project
      operationId: CreateProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreate"
      responses:
        "200":
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
      tags:
        - Projects
    get:
      summary: List all projects
      operationId: GetProjects
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
      tags:
        - Projects

  /api/projects/{projectId}/runs:
    get:
      summary: Get runs for a project
      operationId: GetProjectRuns
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of runs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Run"
        "404":
          description: Project not found
      tags:
        - Runs
    post:
      summary: Create a new run for a project
      operationId: CreateRun
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Run created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
      tags:
        - Runs

  /api/reviews:
    post:
      summary: Create a review request
      operationId: CreateReviewRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewRequest"
      responses:
        "200":
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewStatus"
      tags:
        - Reviews
    get:
      summary: List all review requests
      operationId: GetReviewRequests
      parameters:
        - name: type
          in: query
          schema:
            $ref: "#/components/schemas/SupervisorType"
      responses:
        "200":
          description: List of review requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewRequest"
      tags:
        - Reviews

  /api/reviews/{reviewId}/status:
    get:
      summary: Get review status
      operationId: GetReviewStatus
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Review status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewStatus"
        "404":
          description: Review not found
      tags:
        - Reviews

  /api/runs/{runId}/tools:
    get:
      summary: Get tools for a run
      operationId: GetRunTools
      parameters:
        - name: runId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - Runs
        - Tools
      responses:
        "200":
          description: List of tools
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tool"
        "404":
          description: Run not found

  /api/runs/{runId}/tools/{toolId}/supervisors:
    get:
      summary: Get the supervisors assigned to a tool
      operationId: GetRunToolSupervisors
      parameters:
        - name: runId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: toolId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of tools
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Supervisor"
        "404":
          description: Run or tool not found
      tags:
        - Tools
        - Supervisors
    post:
      summary: Assign a list of supervisors to a tool for a given run
      description: Specify an array of supervisors in supervision order. The first supervisor will be called first, and so on. These supervisors will be called in order when this tool is invoked for the remainder of the run.
      operationId: CreateRunToolSupervisors
      parameters:
        - name: toolId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: runId
          in: path
          required: false
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
      responses:
        "200":
          description: Supervisors assigned to tool successfully
      tags:
        - Tools
        - Supervisors

  /api/tools/{toolId}:
    get:
      summary: Get tool by ID
      operationId: GetTool
      parameters:
        - name: toolId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Tool details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tool"
        "404":
          description: Tool not found
      tags:
        - Tools
  /api/tools:
    get:
      summary: List all tools
      operationId: GetTools
      responses:
        "200":
          description: List of tools
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tool"
      tags:
        - Tools
    post:
      summary: Create a new tool
      operationId: CreateTool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tool"
      responses:
        "200":
          description: Tool created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tool"
      tags:
        - Tools

  /api/projects/{projectId}:
    get:
      summary: Get project by ID
      operationId: GetProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Project details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "404":
          description: Project not found
      tags:
        - Projects

  /api/runs/{runId}:
    get:
      summary: Get run by ID
      operationId: GetRun
      parameters:
        - name: runId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Run details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        "404":
          description: Run not found
      tags:
        - Runs

  /api/supervisors:
    get:
      summary: List all supervisors
      operationId: GetSupervisors
      responses:
        "200":
          description: List of supervisors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Supervisor"
      tags:
        - Supervisors
    post:
      summary: Create a new supervisor
      operationId: CreateSupervisor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Supervisor"
      responses:
        "200":
          description: Supervisor created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Supervisor"
      tags:
        - Supervisors

  /api/supervisors/{supervisorId}:
    get:
      summary: Get supervisor by ID
      operationId: GetSupervisor
      parameters:
        - name: supervisorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Supervisor details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Supervisor"
        "404":
          description: Supervisor not found
      tags:
        - Supervisors

  /api/reviews/{reviewId}:
    get:
      summary: Get review request by ID
      operationId: GetReviewRequest
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Review details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewRequest"
        "404":
          description: Review not found
      tags:
        - Reviews

  /api/reviews/{reviewId}/results:
    get:
      summary: Get review results
      operationId: GetReviewResults
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Review results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewResult"
        "404":
          description: Review not found
      tags:
        - Reviews

  /api/reviews/{reviewId}/toolrequests:
    get:
      summary: Get tool requests for a review
      operationId: GetReviewToolRequests
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Tool requests for the review
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolRequest"
        "404":
          description: Review not found
      tags:
        - Reviews
        - Tools

  /api/stats:
    get:
      summary: Get hub stats
      operationId: GetHubStats
      responses:
        "200":
          description: Hub stats
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HubStats"
      tags:
        - Hub

    /api/llm/explanation:
      post:
        summary: Get LLM explanation
        operationId: GetLLMExplanation
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LLMExplanationRequest"
        responses:
          "200":
            description: LLM explanation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/LLMExplanationResponse"
      tags:
        - LLM

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
      required:
        - id

    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - created_at

    ProjectCreate:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    Run:
      type: object
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
      required:
        - id
        - project_id
        - created_at

    Supervisor:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        created_at:
          type: string
          format: date-time
        type:
          $ref: "#/components/schemas/SupervisorType"
        code:
          type: string
      required:
        - type
        - description
        - created_at

    SupervisorAssignment:
      type: object
      properties:
        supervisor_id:
          type: string
          format: uuid
      required:
        - supervisor_id

    Tool:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        attributes:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - description

    ReviewRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        run_id:
          type: string
          format: uuid
        task_state:
          type: object
          additionalProperties: true
        tool_requests:
          type: array
          items:
            $ref: "#/components/schemas/ToolRequest"
        messages:
          type: array
          items:
            $ref: "#/components/schemas/LLMMessage"
        status:
          $ref: "#/components/schemas/ReviewStatus"
      required:
        - run_id
        - task_state
        - tool_requests
        - messages

    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        run_id:
          type: string
          format: uuid
        task_state:
          type: object
          additionalProperties: true
        status:
          $ref: "#/components/schemas/ReviewStatus"
      required:
        - id
        - run_id
        - task_state

    ReviewStatus:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, completed, assigned]
        created_at:
          type: string
          format: date-time
      required:
        - id
        - status
        - created_at

    ReviewResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
        review_request_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        decision:
          type: string
          enum: [approve, reject, terminate, modify, escalate]
        toolrequest:
          $ref: "#/components/schemas/ToolRequest"
        reasoning:
          type: string
      required:
        - id
        - review_request_id
        - created_at
        - decision
        - reasoning

    LLMMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        role:
          type: string
          enum: [system, user, assistant]
        content:
          type: string
      required:
        - role
        - content

    ToolRequest:
      type: object
      description: A tool request is a request to use a tool. It must be approved by a supervisor.
      properties:
        id:
          type: string
          format: uuid
        tool_id:
          type: string
          format: uuid
        review_request_id:
          type: string
          format: uuid
        message_id:
          type: string
          format: uuid
        arguments:
          type: object
          additionalProperties: true
      required:
        - tool_id
        - arguments

    ToolCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        attributes:
          type: object
          additionalProperties: true
      required:
        - name
        - description

    SupervisorType:
      type: string
      enum: [code, llm, human, all]

    HubStats:
      type: object
      properties:
        connected_clients:
          type: integer
        free_clients:
          type: integer
        busy_clients:
          type: integer
        assigned_reviews:
          type: object
          additionalProperties:
            type: integer
        review_distribution:
          type: object
          additionalProperties:
            type: integer
        completed_reviews_count:
          type: integer
        pending_reviews_count:
          type: integer
        assigned_reviews_count:
          type: integer
      required:
        - connected_clients
        - queued_reviews
        - stored_reviews
        - free_clients
        - busy_clients
        - assigned_reviews
        - review_distribution
        - completed_reviews_count
        - pending_reviews_count
        - assigned_reviews_count

    LLMExplanationRequest:
      type: object
      properties:
        text:
          type: string
      required:
        - text

    LLMExplanationResponse:
      type: object
      properties:
        explanation:
          type: string
