//go:build go1.22

// Package sentinel provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sentinel

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Arguments defines model for Arguments.
type Arguments struct {
	Cmd  *string `json:"cmd,omitempty"`
	Code *string `json:"code,omitempty"`
}

// AssistantMessage defines model for AssistantMessage.
type AssistantMessage struct {
	Content   string      `json:"content"`
	Role      string      `json:"role"`
	Source    *string     `json:"source,omitempty"`
	ToolCalls *[]ToolCall `json:"tool_calls,omitempty"`
}

// Choice defines model for Choice.
type Choice struct {
	Message    AssistantMessage `json:"message"`
	StopReason *string          `json:"stop_reason,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Status string `json:"status"`
}

// Message defines model for Message.
type Message struct {
	Content    string      `json:"content"`
	Function   *string     `json:"function,omitempty"`
	Role       string      `json:"role"`
	Source     *string     `json:"source,omitempty"`
	ToolCallId *string     `json:"tool_call_id,omitempty"`
	ToolCalls  *[]ToolCall `json:"tool_calls,omitempty"`
}

// Output defines model for Output.
type Output struct {
	Choices *[]Choice `json:"choices,omitempty"`
	Model   *string   `json:"model,omitempty"`
	Usage   *Usage    `json:"usage,omitempty"`
}

// ReviewRequest defines model for ReviewRequest.
type ReviewRequest struct {
	AgentId      string       `json:"agent_id"`
	LastMessages []Message    `json:"last_messages"`
	RequestId    *string      `json:"request_id,omitempty"`
	TaskState    TaskState    `json:"task_state"`
	ToolChoices  []ToolChoice `json:"tool_choices"`
}

// ReviewResponse defines model for ReviewResponse.
type ReviewResponse struct {
	Decision   *string     `json:"decision,omitempty"`
	Id         string      `json:"id"`
	ToolChoice *ToolChoice `json:"tool_choice,omitempty"`
}

// ReviewStatus defines model for ReviewStatus.
type ReviewStatus struct {
	Decision   *string     `json:"decision,omitempty"`
	Id         *string     `json:"id,omitempty"`
	ToolChoice *ToolChoice `json:"tool_choice,omitempty"`
}

// TaskState defines model for TaskState.
type TaskState struct {
	Completed  bool                    `json:"completed"`
	Messages   []Message               `json:"messages"`
	Metadata   *map[string]interface{} `json:"metadata,omitempty"`
	Output     Output                  `json:"output"`
	Store      *map[string]interface{} `json:"store,omitempty"`
	ToolChoice *ToolChoice             `json:"tool_choice,omitempty"`
	Tools      []Tool                  `json:"tools"`
}

// Tool defines model for Tool.
type Tool struct {
	Attributes  *map[string]interface{} `json:"attributes,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Name        string                  `json:"name"`
}

// ToolCall defines model for ToolCall.
type ToolCall struct {
	Arguments  map[string]interface{} `json:"arguments"`
	Function   string                 `json:"function"`
	Id         string                 `json:"id"`
	ParseError *string                `json:"parse_error,omitempty"`
	Type       string                 `json:"type"`
}

// ToolChoice defines model for ToolChoice.
type ToolChoice struct {
	Arguments Arguments `json:"arguments"`
	Function  string    `json:"function"`
	Id        string    `json:"id"`
	Type      string    `json:"type"`
}

// Usage defines model for Usage.
type Usage struct {
	InputTokens  int `json:"input_tokens"`
	OutputTokens int `json:"output_tokens"`
	TotalTokens  int `json:"total_tokens"`
}

// GetReviewStatusParams defines parameters for GetReviewStatus.
type GetReviewStatusParams struct {
	Id string `form:"id" json:"id"`
}

// SubmitReviewJSONRequestBody defines body for SubmitReview for application/json ContentType.
type SubmitReviewJSONRequestBody = ReviewRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Submit a review request
	// (POST /api/review)
	SubmitReview(w http.ResponseWriter, r *http.Request)
	// Get the status of a review request
	// (GET /api/review/status)
	GetReviewStatus(w http.ResponseWriter, r *http.Request, params GetReviewStatusParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SubmitReview operation middleware
func (siw *ServerInterfaceWrapper) SubmitReview(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubmitReview(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReviewStatus operation middleware
func (siw *ServerInterfaceWrapper) GetReviewStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReviewStatusParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReviewStatus(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/api/review", wrapper.SubmitReview)
	m.HandleFunc("GET "+options.BaseURL+"/api/review/status", wrapper.GetReviewStatus)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXXY/iNhT9K5Hbx4hk231Y5W26qlb7UHU1s/s0QsgkF/CMY5vrayo04r9XcUJIghNg",
	"OqPuE+A4vuccn/vBC8t1abQCRZZlL8zmGyi5/3qHa1ce1w1qA0gC/K+8LKoP2htgGbOEQq3ZIWa5LiDw",
	"4BAfV/TyCXKqtt5ZKyxxRX+BtXwNgSBaESgKBkItIfjAaod5+BFpLRc5l9KfLghK/+VXhBXL2C/JSYik",
	"USH5rrX8zKVkJwYcke89JYStEwgFyx5brA2yeYDw540WeYBmeeI/BeVMr4osabNA4FarsOpdiMc4IWx/",
	"Imq8B2u0sgGIljg5ezlEsy8U4VW3vHIqJxEk9x8tsBDFz+iRvx0ZRwGRvHeux9R47QxRzEpdgAxSd9e4",
	"8EdtvVBC38NOwD/3sHVgAxT4GhSNyS65pUVj0OtZdjJhSBNrGKPXzO3zonLrRcLfuX1+8Btbd9x4F94f",
	"I/cxcEirUQ/hIO5QrfnEXYwldAG5sGOJNZkabRG7lnK4RPgo48gf2oLzf+I+A3cyQ6CMlUYCQRfDUmsJ",
	"XPm0e0Nvl0C84MR9VhWFqCokl986cAgdBODrtrpMRW5qUN1eEG6O8kq96xdvS6uLCdXKfjy9FSHu3FjI",
	"h/748yJGhGLpqPl1iywF2ByFGW1nipdwucP6XWN4fRc6x9wd426CPNl+R7LNcLSwgGqeCGejX7hE05fA",
	"Nnzc4dCcMCrByJDVE2FyzGo3vlKAdyT4IzxBCWUcLUg/g+rOaEIRrAFPiT+5hTRxObFjiL8bcxhgcNo5",
	"leo0oVbaBxJUzXHsARQJBTK6+/aVxWwHWBd69mGWzlLPwoDiRrCM/T5LZx9YZTbaeLQJNyJB3zq8Prqe",
	"QCqVeKXw16KK4JaloLrBsHZE+EMX+8Ecyo2RIvcvJk/NbF3745J7+jPQoa9alWV+oe7KHvhvafrmwZum",
	"76P3qk7TXKOtAwdFZF2eg7UrJ2VdOa0rS477VqqIR7WmEbaM4q7WyemPwRoCin8B6vVzXx54CQRoWfZY",
	"WZdlbOsA9+xYAevU6KsWdxQY5tX83RVtwI/rWasQIRAK2J0pG7OP6cc3w9T/qzYOSmmKVtqpYnC1X4Ai",
	"2sARtF6Fbrl6A3B3vCaHkmVsQ2SyJJE653KjLWWf0k8pO8wP/wYAAP//DPv/oUQQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
